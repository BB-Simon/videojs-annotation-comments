{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/es6-object-assign/index.js","node_modules/handlebars/lib/handlebars.runtime.js","node_modules/handlebars/lib/handlebars/base.js","node_modules/handlebars/lib/handlebars/decorators.js","node_modules/handlebars/lib/handlebars/decorators/inline.js","node_modules/handlebars/lib/handlebars/exception.js","node_modules/handlebars/lib/handlebars/helpers.js","node_modules/handlebars/lib/handlebars/helpers/block-helper-missing.js","node_modules/handlebars/lib/handlebars/helpers/each.js","node_modules/handlebars/lib/handlebars/helpers/helper-missing.js","node_modules/handlebars/lib/handlebars/helpers/if.js","node_modules/handlebars/lib/handlebars/helpers/log.js","node_modules/handlebars/lib/handlebars/helpers/lookup.js","node_modules/handlebars/lib/handlebars/helpers/with.js","node_modules/handlebars/lib/handlebars/logger.js","node_modules/handlebars/dist/cjs/handlebars/node_modules/handlebars/lib/handlebars/no-conflict.js","node_modules/handlebars/lib/handlebars/runtime.js","node_modules/handlebars/lib/handlebars/safe-string.js","node_modules/handlebars/lib/handlebars/utils.js","node_modules/handlebars/runtime.js","node_modules/ie-array-find-polyfill/index.js","node_modules/moment/moment.js","src/js/annotation_comments.js","src/js/compiled/templates.js","src/js/components/annotation.js","src/js/components/annotation_state.js","src/js/components/comment.js","src/js/components/comment_list.js","src/js/components/controls.js","src/js/components/draggable_marker.js","src/js/components/marker.js","src/js/components/player_button.js","src/js/components/selectable_shape.js","src/js/components/shape.js","src/js/index.js","src/js/lib/event_dispatcher.js","src/js/lib/logger.js","src/js/lib/player_component.js","src/js/lib/player_ui_component.js","src/js/lib/polyfills.js","src/js/lib/utils.js"],"names":[],"mappings":"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","file":"videojs-annotation-comments.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * Code refactored from Mozilla Developer Network:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n */\n\n'use strict';\n\nfunction assign(target, firstSource) {\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert first argument to object');\n  }\n\n  var to = Object(target);\n  for (var i = 1; i < arguments.length; i++) {\n    var nextSource = arguments[i];\n    if (nextSource === undefined || nextSource === null) {\n      continue;\n    }\n\n    var keysArray = Object.keys(Object(nextSource));\n    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n      var nextKey = keysArray[nextIndex];\n      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n      if (desc !== undefined && desc.enumerable) {\n        to[nextKey] = nextSource[nextKey];\n      }\n    }\n  }\n  return to;\n}\n\nfunction polyfill() {\n  if (!Object.assign) {\n    Object.defineProperty(Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign\n    });\n  }\n}\n\nmodule.exports = {\n  assign: assign,\n  polyfill: polyfill\n};\n","import * as base from './handlebars/base';\n\n// Each of these augment the Handlebars object. No need to setup here.\n// (This is done to easily share code between commonjs and browse envs)\nimport SafeString from './handlebars/safe-string';\nimport Exception from './handlebars/exception';\nimport * as Utils from './handlebars/utils';\nimport * as runtime from './handlebars/runtime';\n\nimport noConflict from './handlebars/no-conflict';\n\n// For compatibility and usage outside of module systems, make the Handlebars object a namespace\nfunction create() {\n  let hb = new base.HandlebarsEnvironment();\n\n  Utils.extend(hb, base);\n  hb.SafeString = SafeString;\n  hb.Exception = Exception;\n  hb.Utils = Utils;\n  hb.escapeExpression = Utils.escapeExpression;\n\n  hb.VM = runtime;\n  hb.template = function(spec) {\n    return runtime.template(spec, hb);\n  };\n\n  return hb;\n}\n\nlet inst = create();\ninst.create = create;\n\nnoConflict(inst);\n\ninst['default'] = inst;\n\nexport default inst;\n","import {createFrame, extend, toString} from './utils';\nimport Exception from './exception';\nimport {registerDefaultHelpers} from './helpers';\nimport {registerDefaultDecorators} from './decorators';\nimport logger from './logger';\n\nexport const VERSION = '4.0.11';\nexport const COMPILER_REVISION = 7;\n\nexport const REVISION_CHANGES = {\n  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it\n  2: '== 1.0.0-rc.3',\n  3: '== 1.0.0-rc.4',\n  4: '== 1.x.x',\n  5: '== 2.0.0-alpha.x',\n  6: '>= 2.0.0-beta.1',\n  7: '>= 4.0.0'\n};\n\nconst objectType = '[object Object]';\n\nexport function HandlebarsEnvironment(helpers, partials, decorators) {\n  this.helpers = helpers || {};\n  this.partials = partials || {};\n  this.decorators = decorators || {};\n\n  registerDefaultHelpers(this);\n  registerDefaultDecorators(this);\n}\n\nHandlebarsEnvironment.prototype = {\n  constructor: HandlebarsEnvironment,\n\n  logger: logger,\n  log: logger.log,\n\n  registerHelper: function(name, fn) {\n    if (toString.call(name) === objectType) {\n      if (fn) { throw new Exception('Arg not supported with multiple helpers'); }\n      extend(this.helpers, name);\n    } else {\n      this.helpers[name] = fn;\n    }\n  },\n  unregisterHelper: function(name) {\n    delete this.helpers[name];\n  },\n\n  registerPartial: function(name, partial) {\n    if (toString.call(name) === objectType) {\n      extend(this.partials, name);\n    } else {\n      if (typeof partial === 'undefined') {\n        throw new Exception(`Attempting to register a partial called \"${name}\" as undefined`);\n      }\n      this.partials[name] = partial;\n    }\n  },\n  unregisterPartial: function(name) {\n    delete this.partials[name];\n  },\n\n  registerDecorator: function(name, fn) {\n    if (toString.call(name) === objectType) {\n      if (fn) { throw new Exception('Arg not supported with multiple decorators'); }\n      extend(this.decorators, name);\n    } else {\n      this.decorators[name] = fn;\n    }\n  },\n  unregisterDecorator: function(name) {\n    delete this.decorators[name];\n  }\n};\n\nexport let log = logger.log;\n\nexport {createFrame, logger};\n","import registerInline from './decorators/inline';\n\nexport function registerDefaultDecorators(instance) {\n  registerInline(instance);\n}\n\n","import {extend} from '../utils';\n\nexport default function(instance) {\n  instance.registerDecorator('inline', function(fn, props, container, options) {\n    let ret = fn;\n    if (!props.partials) {\n      props.partials = {};\n      ret = function(context, options) {\n        // Create a new partials stack frame prior to exec.\n        let original = container.partials;\n        container.partials = extend({}, original, props.partials);\n        let ret = fn(context, options);\n        container.partials = original;\n        return ret;\n      };\n    }\n\n    props.partials[options.args[0]] = options.fn;\n\n    return ret;\n  });\n}\n","\nconst errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];\n\nfunction Exception(message, node) {\n  let loc = node && node.loc,\n      line,\n      column;\n  if (loc) {\n    line = loc.start.line;\n    column = loc.start.column;\n\n    message += ' - ' + line + ':' + column;\n  }\n\n  let tmp = Error.prototype.constructor.call(this, message);\n\n  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.\n  for (let idx = 0; idx < errorProps.length; idx++) {\n    this[errorProps[idx]] = tmp[errorProps[idx]];\n  }\n\n  /* istanbul ignore else */\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, Exception);\n  }\n\n  try {\n    if (loc) {\n      this.lineNumber = line;\n\n      // Work around issue under safari where we can't directly set the column value\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(this, 'column', {\n          value: column,\n          enumerable: true\n        });\n      } else {\n        this.column = column;\n      }\n    }\n  } catch (nop) {\n    /* Ignore if the browser is very particular */\n  }\n}\n\nException.prototype = new Error();\n\nexport default Exception;\n","import registerBlockHelperMissing from './helpers/block-helper-missing';\nimport registerEach from './helpers/each';\nimport registerHelperMissing from './helpers/helper-missing';\nimport registerIf from './helpers/if';\nimport registerLog from './helpers/log';\nimport registerLookup from './helpers/lookup';\nimport registerWith from './helpers/with';\n\nexport function registerDefaultHelpers(instance) {\n  registerBlockHelperMissing(instance);\n  registerEach(instance);\n  registerHelperMissing(instance);\n  registerIf(instance);\n  registerLog(instance);\n  registerLookup(instance);\n  registerWith(instance);\n}\n","import {appendContextPath, createFrame, isArray} from '../utils';\n\nexport default function(instance) {\n  instance.registerHelper('blockHelperMissing', function(context, options) {\n    let inverse = options.inverse,\n        fn = options.fn;\n\n    if (context === true) {\n      return fn(this);\n    } else if (context === false || context == null) {\n      return inverse(this);\n    } else if (isArray(context)) {\n      if (context.length > 0) {\n        if (options.ids) {\n          options.ids = [options.name];\n        }\n\n        return instance.helpers.each(context, options);\n      } else {\n        return inverse(this);\n      }\n    } else {\n      if (options.data && options.ids) {\n        let data = createFrame(options.data);\n        data.contextPath = appendContextPath(options.data.contextPath, options.name);\n        options = {data: data};\n      }\n\n      return fn(context, options);\n    }\n  });\n}\n","import {appendContextPath, blockParams, createFrame, isArray, isFunction} from '../utils';\nimport Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('each', function(context, options) {\n    if (!options) {\n      throw new Exception('Must pass iterator to #each');\n    }\n\n    let fn = options.fn,\n        inverse = options.inverse,\n        i = 0,\n        ret = '',\n        data,\n        contextPath;\n\n    if (options.data && options.ids) {\n      contextPath = appendContextPath(options.data.contextPath, options.ids[0]) + '.';\n    }\n\n    if (isFunction(context)) { context = context.call(this); }\n\n    if (options.data) {\n      data = createFrame(options.data);\n    }\n\n    function execIteration(field, index, last) {\n      if (data) {\n        data.key = field;\n        data.index = index;\n        data.first = index === 0;\n        data.last = !!last;\n\n        if (contextPath) {\n          data.contextPath = contextPath + field;\n        }\n      }\n\n      ret = ret + fn(context[field], {\n        data: data,\n        blockParams: blockParams([context[field], field], [contextPath + field, null])\n      });\n    }\n\n    if (context && typeof context === 'object') {\n      if (isArray(context)) {\n        for (let j = context.length; i < j; i++) {\n          if (i in context) {\n            execIteration(i, i, i === context.length - 1);\n          }\n        }\n      } else {\n        let priorKey;\n\n        for (let key in context) {\n          if (context.hasOwnProperty(key)) {\n            // We're running the iterations one step out of sync so we can detect\n            // the last iteration without have to scan the object twice and create\n            // an itermediate keys array.\n            if (priorKey !== undefined) {\n              execIteration(priorKey, i - 1);\n            }\n            priorKey = key;\n            i++;\n          }\n        }\n        if (priorKey !== undefined) {\n          execIteration(priorKey, i - 1, true);\n        }\n      }\n    }\n\n    if (i === 0) {\n      ret = inverse(this);\n    }\n\n    return ret;\n  });\n}\n","import Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('helperMissing', function(/* [args, ]options */) {\n    if (arguments.length === 1) {\n      // A missing field in a {{foo}} construct.\n      return undefined;\n    } else {\n      // Someone is actually trying to call something, blow up.\n      throw new Exception('Missing helper: \"' + arguments[arguments.length - 1].name + '\"');\n    }\n  });\n}\n","import {isEmpty, isFunction} from '../utils';\n\nexport default function(instance) {\n  instance.registerHelper('if', function(conditional, options) {\n    if (isFunction(conditional)) { conditional = conditional.call(this); }\n\n    // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n    if ((!options.hash.includeZero && !conditional) || isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  });\n\n  instance.registerHelper('unless', function(conditional, options) {\n    return instance.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn, hash: options.hash});\n  });\n}\n","export default function(instance) {\n  instance.registerHelper('log', function(/* message, options */) {\n    let args = [undefined],\n        options = arguments[arguments.length - 1];\n    for (let i = 0; i < arguments.length - 1; i++) {\n      args.push(arguments[i]);\n    }\n\n    let level = 1;\n    if (options.hash.level != null) {\n      level = options.hash.level;\n    } else if (options.data && options.data.level != null) {\n      level = options.data.level;\n    }\n    args[0] = level;\n\n    instance.log(... args);\n  });\n}\n","export default function(instance) {\n  instance.registerHelper('lookup', function(obj, field) {\n    return obj && obj[field];\n  });\n}\n","import {appendContextPath, blockParams, createFrame, isEmpty, isFunction} from '../utils';\n\nexport default function(instance) {\n  instance.registerHelper('with', function(context, options) {\n    if (isFunction(context)) { context = context.call(this); }\n\n    let fn = options.fn;\n\n    if (!isEmpty(context)) {\n      let data = options.data;\n      if (options.data && options.ids) {\n        data = createFrame(options.data);\n        data.contextPath = appendContextPath(options.data.contextPath, options.ids[0]);\n      }\n\n      return fn(context, {\n        data: data,\n        blockParams: blockParams([context], [data && data.contextPath])\n      });\n    } else {\n      return options.inverse(this);\n    }\n  });\n}\n","import {indexOf} from './utils';\n\nlet logger = {\n  methodMap: ['debug', 'info', 'warn', 'error'],\n  level: 'info',\n\n  // Maps a given level value to the `methodMap` indexes above.\n  lookupLevel: function(level) {\n    if (typeof level === 'string') {\n      let levelMap = indexOf(logger.methodMap, level.toLowerCase());\n      if (levelMap >= 0) {\n        level = levelMap;\n      } else {\n        level = parseInt(level, 10);\n      }\n    }\n\n    return level;\n  },\n\n  // Can be overridden in the host environment\n  log: function(level, ...message) {\n    level = logger.lookupLevel(level);\n\n    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {\n      let method = logger.methodMap[level];\n      if (!console[method]) {   // eslint-disable-line no-console\n        method = 'log';\n      }\n      console[method](...message);    // eslint-disable-line no-console\n    }\n  }\n};\n\nexport default logger;\n","/* global window */\nexport default function(Handlebars) {\n  /* istanbul ignore next */\n  let root = typeof global !== 'undefined' ? global : window,\n      $Handlebars = root.Handlebars;\n  /* istanbul ignore next */\n  Handlebars.noConflict = function() {\n    if (root.Handlebars === Handlebars) {\n      root.Handlebars = $Handlebars;\n    }\n    return Handlebars;\n  };\n}\n","import * as Utils from './utils';\nimport Exception from './exception';\nimport { COMPILER_REVISION, REVISION_CHANGES, createFrame } from './base';\n\nexport function checkRevision(compilerInfo) {\n  const compilerRevision = compilerInfo && compilerInfo[0] || 1,\n        currentRevision = COMPILER_REVISION;\n\n  if (compilerRevision !== currentRevision) {\n    if (compilerRevision < currentRevision) {\n      const runtimeVersions = REVISION_CHANGES[currentRevision],\n            compilerVersions = REVISION_CHANGES[compilerRevision];\n      throw new Exception('Template was precompiled with an older version of Handlebars than the current runtime. ' +\n            'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');\n    } else {\n      // Use the embedded version info since the runtime doesn't know about this revision yet\n      throw new Exception('Template was precompiled with a newer version of Handlebars than the current runtime. ' +\n            'Please update your runtime to a newer version (' + compilerInfo[1] + ').');\n    }\n  }\n}\n\nexport function template(templateSpec, env) {\n  /* istanbul ignore next */\n  if (!env) {\n    throw new Exception('No environment passed to template');\n  }\n  if (!templateSpec || !templateSpec.main) {\n    throw new Exception('Unknown template object: ' + typeof templateSpec);\n  }\n\n  templateSpec.main.decorator = templateSpec.main_d;\n\n  // Note: Using env.VM references rather than local var references throughout this section to allow\n  // for external users to override these as psuedo-supported APIs.\n  env.VM.checkRevision(templateSpec.compiler);\n\n  function invokePartialWrapper(partial, context, options) {\n    if (options.hash) {\n      context = Utils.extend({}, context, options.hash);\n      if (options.ids) {\n        options.ids[0] = true;\n      }\n    }\n\n    partial = env.VM.resolvePartial.call(this, partial, context, options);\n    let result = env.VM.invokePartial.call(this, partial, context, options);\n\n    if (result == null && env.compile) {\n      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);\n      result = options.partials[options.name](context, options);\n    }\n    if (result != null) {\n      if (options.indent) {\n        let lines = result.split('\\n');\n        for (let i = 0, l = lines.length; i < l; i++) {\n          if (!lines[i] && i + 1 === l) {\n            break;\n          }\n\n          lines[i] = options.indent + lines[i];\n        }\n        result = lines.join('\\n');\n      }\n      return result;\n    } else {\n      throw new Exception('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');\n    }\n  }\n\n  // Just add water\n  let container = {\n    strict: function(obj, name) {\n      if (!(name in obj)) {\n        throw new Exception('\"' + name + '\" not defined in ' + obj);\n      }\n      return obj[name];\n    },\n    lookup: function(depths, name) {\n      const len = depths.length;\n      for (let i = 0; i < len; i++) {\n        if (depths[i] && depths[i][name] != null) {\n          return depths[i][name];\n        }\n      }\n    },\n    lambda: function(current, context) {\n      return typeof current === 'function' ? current.call(context) : current;\n    },\n\n    escapeExpression: Utils.escapeExpression,\n    invokePartial: invokePartialWrapper,\n\n    fn: function(i) {\n      let ret = templateSpec[i];\n      ret.decorator = templateSpec[i + '_d'];\n      return ret;\n    },\n\n    programs: [],\n    program: function(i, data, declaredBlockParams, blockParams, depths) {\n      let programWrapper = this.programs[i],\n          fn = this.fn(i);\n      if (data || depths || blockParams || declaredBlockParams) {\n        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);\n      } else if (!programWrapper) {\n        programWrapper = this.programs[i] = wrapProgram(this, i, fn);\n      }\n      return programWrapper;\n    },\n\n    data: function(value, depth) {\n      while (value && depth--) {\n        value = value._parent;\n      }\n      return value;\n    },\n    merge: function(param, common) {\n      let obj = param || common;\n\n      if (param && common && (param !== common)) {\n        obj = Utils.extend({}, common, param);\n      }\n\n      return obj;\n    },\n    // An empty object to use as replacement for null-contexts\n    nullContext: Object.seal({}),\n\n    noop: env.VM.noop,\n    compilerInfo: templateSpec.compiler\n  };\n\n  function ret(context, options = {}) {\n    let data = options.data;\n\n    ret._setup(options);\n    if (!options.partial && templateSpec.useData) {\n      data = initData(context, data);\n    }\n    let depths,\n        blockParams = templateSpec.useBlockParams ? [] : undefined;\n    if (templateSpec.useDepths) {\n      if (options.depths) {\n        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;\n      } else {\n        depths = [context];\n      }\n    }\n\n    function main(context/*, options*/) {\n      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);\n    }\n    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);\n    return main(context, options);\n  }\n  ret.isTop = true;\n\n  ret._setup = function(options) {\n    if (!options.partial) {\n      container.helpers = container.merge(options.helpers, env.helpers);\n\n      if (templateSpec.usePartial) {\n        container.partials = container.merge(options.partials, env.partials);\n      }\n      if (templateSpec.usePartial || templateSpec.useDecorators) {\n        container.decorators = container.merge(options.decorators, env.decorators);\n      }\n    } else {\n      container.helpers = options.helpers;\n      container.partials = options.partials;\n      container.decorators = options.decorators;\n    }\n  };\n\n  ret._child = function(i, data, blockParams, depths) {\n    if (templateSpec.useBlockParams && !blockParams) {\n      throw new Exception('must pass block params');\n    }\n    if (templateSpec.useDepths && !depths) {\n      throw new Exception('must pass parent depths');\n    }\n\n    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);\n  };\n  return ret;\n}\n\nexport function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {\n  function prog(context, options = {}) {\n    let currentDepths = depths;\n    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {\n      currentDepths = [context].concat(depths);\n    }\n\n    return fn(container,\n        context,\n        container.helpers, container.partials,\n        options.data || data,\n        blockParams && [options.blockParams].concat(blockParams),\n        currentDepths);\n  }\n\n  prog = executeDecorators(fn, prog, container, depths, data, blockParams);\n\n  prog.program = i;\n  prog.depth = depths ? depths.length : 0;\n  prog.blockParams = declaredBlockParams || 0;\n  return prog;\n}\n\nexport function resolvePartial(partial, context, options) {\n  if (!partial) {\n    if (options.name === '@partial-block') {\n      partial = options.data['partial-block'];\n    } else {\n      partial = options.partials[options.name];\n    }\n  } else if (!partial.call && !options.name) {\n    // This is a dynamic partial that returned a string\n    options.name = partial;\n    partial = options.partials[partial];\n  }\n  return partial;\n}\n\nexport function invokePartial(partial, context, options) {\n  // Use the current closure context to save the partial-block if this partial\n  const currentPartialBlock = options.data && options.data['partial-block'];\n  options.partial = true;\n  if (options.ids) {\n    options.data.contextPath = options.ids[0] || options.data.contextPath;\n  }\n\n  let partialBlock;\n  if (options.fn && options.fn !== noop) {\n    options.data = createFrame(options.data);\n    // Wrapper function to get access to currentPartialBlock from the closure\n    let fn = options.fn;\n    partialBlock = options.data['partial-block'] = function partialBlockWrapper(context, options = {}) {\n\n      // Restore the partial-block from the closure for the execution of the block\n      // i.e. the part inside the block of the partial call.\n      options.data = createFrame(options.data);\n      options.data['partial-block'] = currentPartialBlock;\n      return fn(context, options);\n    };\n    if (fn.partials) {\n      options.partials = Utils.extend({}, options.partials, fn.partials);\n    }\n  }\n\n  if (partial === undefined && partialBlock) {\n    partial = partialBlock;\n  }\n\n  if (partial === undefined) {\n    throw new Exception('The partial ' + options.name + ' could not be found');\n  } else if (partial instanceof Function) {\n    return partial(context, options);\n  }\n}\n\nexport function noop() { return ''; }\n\nfunction initData(context, data) {\n  if (!data || !('root' in data)) {\n    data = data ? createFrame(data) : {};\n    data.root = context;\n  }\n  return data;\n}\n\nfunction executeDecorators(fn, prog, container, depths, data, blockParams) {\n  if (fn.decorator) {\n    let props = {};\n    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);\n    Utils.extend(prog, props);\n  }\n  return prog;\n}\n","// Build out our basic SafeString type\nfunction SafeString(string) {\n  this.string = string;\n}\n\nSafeString.prototype.toString = SafeString.prototype.toHTML = function() {\n  return '' + this.string;\n};\n\nexport default SafeString;\n","const escape = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\n\nconst badChars = /[&<>\"'`=]/g,\n      possible = /[&<>\"'`=]/;\n\nfunction escapeChar(chr) {\n  return escape[chr];\n}\n\nexport function extend(obj/* , ...source */) {\n  for (let i = 1; i < arguments.length; i++) {\n    for (let key in arguments[i]) {\n      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {\n        obj[key] = arguments[i][key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nexport let toString = Object.prototype.toString;\n\n// Sourced from lodash\n// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt\n/* eslint-disable func-style */\nlet isFunction = function(value) {\n  return typeof value === 'function';\n};\n// fallback for older versions of Chrome and Safari\n/* istanbul ignore next */\nif (isFunction(/x/)) {\n  isFunction = function(value) {\n    return typeof value === 'function' && toString.call(value) === '[object Function]';\n  };\n}\nexport {isFunction};\n/* eslint-enable func-style */\n\n/* istanbul ignore next */\nexport const isArray = Array.isArray || function(value) {\n  return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;\n};\n\n// Older IE versions do not directly support indexOf so we must implement our own, sadly.\nexport function indexOf(array, value) {\n  for (let i = 0, len = array.length; i < len; i++) {\n    if (array[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n\nexport function escapeExpression(string) {\n  if (typeof string !== 'string') {\n    // don't escape SafeStrings, since they're already safe\n    if (string && string.toHTML) {\n      return string.toHTML();\n    } else if (string == null) {\n      return '';\n    } else if (!string) {\n      return string + '';\n    }\n\n    // Force a string conversion as this will be done by the append regardless and\n    // the regex test will do this transparently behind the scenes, causing issues if\n    // an object's to string has escaped characters in it.\n    string = '' + string;\n  }\n\n  if (!possible.test(string)) { return string; }\n  return string.replace(badChars, escapeChar);\n}\n\nexport function isEmpty(value) {\n  if (!value && value !== 0) {\n    return true;\n  } else if (isArray(value) && value.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function createFrame(object) {\n  let frame = extend({}, object);\n  frame._parent = object;\n  return frame;\n}\n\nexport function blockParams(params, ids) {\n  params.path = ids;\n  return params;\n}\n\nexport function appendContextPath(contextPath, id) {\n  return (contextPath ? contextPath + '.' : '') + id;\n}\n","// Create a simple path alias to allow browserify to resolve\n// the runtime on a supported path.\nmodule.exports = require('./dist/cjs/handlebars.runtime')['default'];\n","'use strict';\nif (!Array.prototype.find) {\n    Object.defineProperty(Array.prototype, 'find', {\n        value: function (predicate) {\n\n            if (this == null) {\n                throw new TypeError('this is null or not defined');\n            }\n\n            var obj = Object(this);\n            var len = obj.length >>> 0;\n\n            if (typeof predicate !== 'function') {\n                throw new TypeError('predicate must be a function');\n            }\n\n            var thisArg = arguments[1];\n\n            var index = 0;\n\n            while (index < len) {\n                var iValue = obj[index];\n                if (predicate.call(thisArg, iValue, index, obj)) {\n                    return iValue;\n                }\n                index++;\n            }\n\n            return undefined;\n        }\n    });\n}","//! moment.js\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, (function () { 'use strict';\n\n    var hookCallback;\n\n    function hooks () {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback (callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn't for\n        // input != null\n        return input != null && Object.prototype.toString.call(input) === '[object Object]';\n    }\n\n    function isObjectEmpty(obj) {\n        if (Object.getOwnPropertyNames) {\n            return (Object.getOwnPropertyNames(obj).length === 0);\n        } else {\n            var k;\n            for (k in obj) {\n                if (obj.hasOwnProperty(k)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    function isNumber(input) {\n        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';\n    }\n\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n    }\n\n    function map(arr, fn) {\n        var res = [], i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function createUTC (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty           : false,\n            unusedTokens    : [],\n            unusedInput     : [],\n            overflow        : -2,\n            charsLeftOver   : 0,\n            nullInput       : false,\n            invalidMonth    : null,\n            invalidFormat   : false,\n            userInvalidated : false,\n            iso             : false,\n            parsedDateParts : [],\n            meridiem        : null,\n            rfc2822         : false,\n            weekdayMismatch : false\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this);\n            var len = t.length >>> 0;\n\n            for (var i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m);\n            var parsedParts = some.call(flags.parsedDateParts, function (i) {\n                return i != null;\n            });\n            var isNowValid = !isNaN(m._d.getTime()) &&\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidMonth &&\n                !flags.invalidWeekday &&\n                !flags.weekdayMismatch &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated &&\n                (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                isNowValid = isNowValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n\n            if (Object.isFrozen == null || !Object.isFrozen(m)) {\n                m._isValid = isNowValid;\n            }\n            else {\n                return isNowValid;\n            }\n        }\n        return m._isValid;\n    }\n\n    function createInvalid (flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        }\n        else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = hooks.momentProperties = [];\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i = 0; i < momentProperties.length; i++) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    var updateInProgress = false;\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        if (!this.isValid()) {\n            this._d = new Date(NaN);\n        }\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment (obj) {\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\n    }\n\n    function absFloor (number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function warn(msg) {\n        if (hooks.suppressDeprecationWarnings === false &&\n                (typeof console !==  'undefined') && console.warn) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [];\n                var arg;\n                for (var i = 0; i < arguments.length; i++) {\n                    arg = '';\n                    if (typeof arguments[i] === 'object') {\n                        arg += '\\n[' + i + '] ';\n                        for (var key in arguments[0]) {\n                            arg += key + ': ' + arguments[0][key] + ', ';\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(args).join('') + '\\n' + (new Error()).stack);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n    }\n\n    function set (config) {\n        var prop, i;\n        for (i in config) {\n            prop = config[i];\n            if (isFunction(prop)) {\n                this[i] = prop;\n            } else {\n                this['_' + i] = prop;\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        this._dayOfMonthOrdinalParseLenient = new RegExp(\n            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +\n                '|' + (/\\d{1,2}/).source);\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig), prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (hasOwnProp(parentConfig, prop) &&\n                    !hasOwnProp(childConfig, prop) &&\n                    isObject(parentConfig[prop])) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i, res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay : '[Today at] LT',\n        nextDay : '[Tomorrow at] LT',\n        nextWeek : 'dddd [at] LT',\n        lastDay : '[Yesterday at] LT',\n        lastWeek : '[Last] dddd [at] LT',\n        sameElse : 'L'\n    };\n\n    function calendar (key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    var defaultLongDateFormat = {\n        LTS  : 'h:mm:ss A',\n        LT   : 'h:mm A',\n        L    : 'MM/DD/YYYY',\n        LL   : 'MMMM D, YYYY',\n        LLL  : 'MMMM D, YYYY h:mm A',\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'\n    };\n\n    function longDateFormat (key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate () {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d';\n    var defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n    function ordinal (number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future : 'in %s',\n        past   : '%s ago',\n        s  : 'a few seconds',\n        ss : '%d seconds',\n        m  : 'a minute',\n        mm : '%d minutes',\n        h  : 'an hour',\n        hh : '%d hours',\n        d  : 'a day',\n        dd : '%d days',\n        M  : 'a month',\n        MM : '%d months',\n        y  : 'a year',\n        yy : '%d years'\n    };\n\n    function relativeTime (number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return (isFunction(output)) ?\n            output(number, withoutSuffix, string, isFuture) :\n            output.replace(/%d/i, number);\n    }\n\n    function pastFuture (diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias (unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [];\n        for (var u in unitsObj) {\n            units.push({unit: u, priority: priorities[u]});\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\n    var formatFunctions = {};\n\n    var formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken (token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '', i;\n            for (i = 0; i < length; i++) {\n                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var match1         = /\\d/;            //       0 - 9\n    var match2         = /\\d\\d/;          //      00 - 99\n    var match3         = /\\d{3}/;         //     000 - 999\n    var match4         = /\\d{4}/;         //    0000 - 9999\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\n    var match1to2      = /\\d\\d?/;         //       0 - 99\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n    var match1to3      = /\\d{1,3}/;       //       0 - 999\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\n\n    var matchUnsigned  = /\\d+/;           //       0 - inf\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\n\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n\n    // any word (or two) characters or numbers including two/three word month in arabic.\n    // includes scottish gaelic two word and hyphenated months\n    var matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i;\n\n    var regexes = {};\n\n    function addRegexToken (token, regex, strictRegex) {\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n            return (isStrict && strictRegex) ? strictRegex : regex;\n        };\n    }\n\n    function getParseRegexForToken (token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        }));\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken (token, callback) {\n        var i, func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (isNumber(callback)) {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken (token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0;\n    var MONTH = 1;\n    var DATE = 2;\n    var HOUR = 3;\n    var MINUTE = 4;\n    var SECOND = 5;\n    var MILLISECOND = 6;\n    var WEEK = 7;\n    var WEEKDAY = 8;\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? '' + y : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY',   4],       0, 'year');\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y',      matchSigned);\n    addRegexToken('YY',     match1to2, match2);\n    addRegexToken('YYYY',   match1to4, match4);\n    addRegexToken('YYYYY',  match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    // HOOKS\n\n    hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear () {\n        return isLeapYear(this.year());\n    }\n\n    function makeGetSet (unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n\n    function get (mom, unit) {\n        return mom.isValid() ?\n            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\n    }\n\n    function set$1 (mom, unit, value) {\n        if (mom.isValid() && !isNaN(value)) {\n            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));\n            }\n            else {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet (units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n\n    function stringSet (units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units);\n            for (var i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function mod(n, x) {\n        return ((n % x) + x) % x;\n    }\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        if (isNaN(year) || isNaN(month)) {\n            return NaN;\n        }\n        var modMonth = mod(month, 12);\n        year += (month - modMonth) / 12;\n        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M',    match1to2);\n    addRegexToken('MM',   match1to2, match2);\n    addRegexToken('MMM',  function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m, format) {\n        if (!m) {\n            return isArray(this._months) ? this._months :\n                this._months['standalone'];\n        }\n        return isArray(this._months) ? this._months[m.month()] :\n            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\n    function localeMonthsShort (m, format) {\n        if (!m) {\n            return isArray(this._monthsShort) ? this._monthsShort :\n                this._monthsShort['standalone'];\n        }\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    function handleStrictParse(monthName, format, strict) {\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse (monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth (mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth (value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth () {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    var defaultMonthsShortRegex = matchWord;\n    function monthsShortRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict ?\n                this._monthsShortStrictRegex : this._monthsShortRegex;\n        }\n    }\n\n    var defaultMonthsRegex = matchWord;\n    function monthsRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict ?\n                this._monthsStrictRegex : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n    }\n\n    function createDate (y, m, d, h, M, s, ms) {\n        // can't just apply() to create a date:\n        // https://stackoverflow.com/q/181348\n        var date = new Date(y, m, d, h, M, s, ms);\n\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\n            date.setFullYear(y);\n        }\n        return date;\n    }\n\n    function createUTCDate (y) {\n        var date = new Date(Date.UTC.apply(null, arguments));\n\n        // the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\n            date.setUTCFullYear(y);\n        }\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear, resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek, resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w',  match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W',  match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek (mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow : 0, // Sunday is the first day of the week.\n        doy : 6  // The week that contains Jan 1st is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek () {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear () {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek (input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek (input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d',    match1to2);\n    addRegexToken('e',    match1to2);\n    addRegexToken('E',    match1to2);\n    addRegexToken('dd',   function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd',   function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd',   function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\n    function localeWeekdays (m, format) {\n        if (!m) {\n            return isArray(this._weekdays) ? this._weekdays :\n                this._weekdays['standalone'];\n        }\n        return isArray(this._weekdays) ? this._weekdays[m.day()] :\n            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];\n    }\n\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\n    function localeWeekdaysShort (m) {\n        return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;\n    }\n\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\n    function localeWeekdaysMin (m) {\n        return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;\n    }\n\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse (weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');\n            }\n            if (!this._weekdaysParse[i]) {\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    var defaultWeekdaysRegex = matchWord;\n    function weekdaysRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict ?\n                this._weekdaysStrictRegex : this._weekdaysRegex;\n        }\n    }\n\n    var defaultWeekdaysShortRegex = matchWord;\n    function weekdaysShortRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict ?\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n        }\n    }\n\n    var defaultWeekdaysMinRegex = matchWord;\n    function weekdaysMinRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ?\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    }\n\n\n    function computeWeekdaysParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom, minp, shortp, longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, 1]).day(i);\n            minp = this.weekdaysMin(mom, '');\n            shortp = this.weekdaysShort(mom, '');\n            longp = this.weekdays(mom, '');\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 7; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    function meridiem (token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem (isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a',  matchMeridiem);\n    addRegexToken('A',  matchMeridiem);\n    addRegexToken('H',  match1to2);\n    addRegexToken('h',  match1to2);\n    addRegexToken('k',  match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n    addRegexToken('kk', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['k', 'kk'], function (input, array, config) {\n        var kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n    });\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM (input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return ((input + '').toLowerCase().charAt(0) === 'p');\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n    function localeMeridiem (hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n\n    // MOMENTS\n\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour they want. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    var getSetHour = makeGetSet('Hours', true);\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse\n    };\n\n    // internal storage for locale config files\n    var locales = {};\n    var localeFamilies = {};\n    var globalLocale;\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return globalLocale;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (!locales[name] && (typeof module !== 'undefined') &&\n                module && module.exports) {\n            try {\n                oldLocale = globalLocale._abbr;\n                var aliasedRequire = require;\n                aliasedRequire('./locale/' + name);\n                getSetGlobalLocale(oldLocale);\n            } catch (e) {}\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale (key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            }\n            else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            }\n            else {\n                if ((typeof console !==  'undefined') && console.warn) {\n                    //warn user if arguments are passed but the locale could not be set\n                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');\n                }\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale (name, config) {\n        if (config !== null) {\n            var locale, parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple('defineLocaleOverride',\n                        'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    locale = loadLocale(config.parentLocale);\n                    if (locale != null) {\n                        parentConfig = locale._config;\n                    } else {\n                        if (!localeFamilies[config.parentLocale]) {\n                            localeFamilies[config.parentLocale] = [];\n                        }\n                        localeFamilies[config.parentLocale].push({\n                            name: name,\n                            config: config\n                        });\n                        return null;\n                    }\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won't end up with the child locale set.\n            getSetGlobalLocale(name);\n\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale, tmpLocale, parentConfig = baseConfig;\n            // MERGE\n            tmpLocale = loadLocale(name);\n            if (tmpLocale != null) {\n                parentConfig = tmpLocale._config;\n            }\n            config = mergeConfigs(parentConfig, config);\n            locale = new Locale(config);\n            locale.parentLocale = locales[name];\n            locales[name] = locale;\n\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function getLocale (key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow (m) {\n        var overflow;\n        var a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray (config) {\n        var i, date, input = [], currentDate, expectedWeekday, yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear != null) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (config._a[HOUR] === 24 &&\n                config._a[MINUTE] === 0 &&\n                config._a[SECOND] === 0 &&\n                config._a[MILLISECOND] === 0) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();\n\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n\n        // check for mismatching day of week\n        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {\n            getParsingFlags(config).weekdayMismatch = true;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            var curWeek = weekOfYear(createLocal(), dow, doy);\n\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from begining of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to begining of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\n    var isoDates = [\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n        ['YYYYYYMMDD', /[+-]\\d{10}/],\n        ['YYYYMMDD', /\\d{8}/],\n        // YYYYMM is NOT allowed by the standard\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n        ['YYYYDDD', /\\d{7}/]\n    ];\n\n    // iso time formats and regexes\n    var isoTimes = [\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n        ['HH:mm', /\\d\\d:\\d\\d/],\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n        ['HHmm', /\\d\\d\\d\\d/],\n        ['HH', /\\d\\d/]\n    ];\n\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n    // date from iso format\n    function configFromISO(config) {\n        var i, l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime, dateFormat, timeFormat, tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n\n    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n        var result = [\n            untruncateYear(yearStr),\n            defaultLocaleMonthsShort.indexOf(monthStr),\n            parseInt(dayStr, 10),\n            parseInt(hourStr, 10),\n            parseInt(minuteStr, 10)\n        ];\n\n        if (secondStr) {\n            result.push(parseInt(secondStr, 10));\n        }\n\n        return result;\n    }\n\n    function untruncateYear(yearStr) {\n        var year = parseInt(yearStr, 10);\n        if (year <= 49) {\n            return 2000 + year;\n        } else if (year <= 999) {\n            return 1900 + year;\n        }\n        return year;\n    }\n\n    function preprocessRFC2822(s) {\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\n        return s.replace(/\\([^)]*\\)|[\\n\\t]/g, ' ').replace(/(\\s\\s+)/g, ' ').trim();\n    }\n\n    function checkWeekday(weekdayStr, parsedInput, config) {\n        if (weekdayStr) {\n            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\n            if (weekdayProvided !== weekdayActual) {\n                getParsingFlags(config).weekdayMismatch = true;\n                config._isValid = false;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    var obsOffsets = {\n        UT: 0,\n        GMT: 0,\n        EDT: -4 * 60,\n        EST: -5 * 60,\n        CDT: -5 * 60,\n        CST: -6 * 60,\n        MDT: -6 * 60,\n        MST: -7 * 60,\n        PDT: -7 * 60,\n        PST: -8 * 60\n    };\n\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\n        if (obsOffset) {\n            return obsOffsets[obsOffset];\n        } else if (militaryOffset) {\n            // the only allowed military tz is Z\n            return 0;\n        } else {\n            var hm = parseInt(numOffset, 10);\n            var m = hm % 100, h = (hm - m) / 100;\n            return h * 60 + m;\n        }\n    }\n\n    // date and time from ref 2822 format\n    function configFromRFC2822(config) {\n        var match = rfc2822.exec(preprocessRFC2822(config._i));\n        if (match) {\n            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\n            if (!checkWeekday(match[1], parsedArray, config)) {\n                return;\n            }\n\n            config._a = parsedArray;\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n            config._d = createUTCDate.apply(null, config._a);\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n            getParsingFlags(config).rfc2822 = true;\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from iso format or fallback\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        configFromRFC2822(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        // Final attempt, use Input Fallback\n        hooks.createFromInputFallback(config);\n    }\n\n    hooks.createFromInputFallback = deprecate(\n        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n        'discouraged and will be removed in an upcoming major release. Please refer to ' +\n        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function () {};\n\n    // constant that refers to the RFC 2822 form\n    hooks.RFC_2822 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n        if (config._f === hooks.RFC_2822) {\n            configFromRFC2822(config);\n            return;\n        }\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            // console.log('token', token, 'parsedInput', parsedInput,\n            //         'regex', getParseRegexForToken(token, config));\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                }\n                else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n\n    function meridiemFixWrap (locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (!isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i);\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n            return obj && parseInt(obj, 10);\n        });\n\n        configFromArray(config);\n    }\n\n    function createFromConfig (config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig (config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return createInvalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        }  else {\n            configFromInput(config);\n        }\n\n        if (!isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (isUndefined(input)) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (isObject(input)) {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if ((isObject(input) && isObjectEmpty(input)) ||\n                (isArray(input) && input.length === 0)) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function createLocal (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other < this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    var prototypeMax = deprecate(\n        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other > this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +(new Date());\n    };\n\n    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];\n\n    function isDurationValid(m) {\n        for (var key in m) {\n            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {\n                return false;\n            }\n        }\n\n        var unitHasDecimal = false;\n        for (var i = 0; i < ordering.length; ++i) {\n            if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                    return false; // only allow non-integers for smallest unit\n                }\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                    unitHasDecimal = true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function isValid$1() {\n        return this._isValid;\n    }\n\n    function createInvalid$1() {\n        return createDuration(NaN);\n    }\n\n    function Duration (duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        this._isValid = isDurationValid(normalizedInput);\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n\n        this._data = {};\n\n        this._locale = getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration (obj) {\n        return obj instanceof Duration;\n    }\n\n    function absRound (number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // FORMATTING\n\n    function offset (token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset();\n            var sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z',  matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = (string || '').match(matcher);\n\n        if (matches === null) {\n            return null;\n        }\n\n        var chunk   = matches[matches.length - 1] || [];\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return minutes === 0 ?\n          0 :\n          parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n\n    function getDateOffset (m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset (input, keepLocalTime, keepMinutes) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone (input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC (keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal (keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset () {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm, false, true);\n        } else if (typeof this._i === 'string') {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            }\n            else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset (input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime () {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted () {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {};\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted = this.isValid() &&\n                compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal () {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset () {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc () {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(\\-|\\+)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;\n\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    var isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n    function createDuration (input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms : input._milliseconds,\n                d  : input._days,\n                M  : input._months\n            };\n        } else if (isNumber(input)) {\n            duration = {};\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y  : 0,\n                d  : toInt(match[DATE])                         * sign,\n                h  : toInt(match[HOUR])                         * sign,\n                m  : toInt(match[MINUTE])                       * sign,\n                s  : toInt(match[SECOND])                       * sign,\n                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n            };\n        } else if (!!(match = isoRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;\n            duration = {\n                y : parseIso(match[2], sign),\n                M : parseIso(match[3], sign),\n                w : parseIso(match[4], sign),\n                d : parseIso(match[5], sign),\n                h : parseIso(match[6], sign),\n                m : parseIso(match[7], sign),\n                s : parseIso(match[8], sign)\n            };\n        } else if (duration == null) {// checks for null or undefined\n            duration = {};\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        return ret;\n    }\n\n    createDuration.fn = Duration.prototype;\n    createDuration.invalid = createInvalid$1;\n\n    function parseIso (inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {milliseconds: 0, months: 0};\n\n        res.months = other.month() - base.month() +\n            (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return {milliseconds: 0, months: 0};\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n                tmp = val; val = period; period = tmp;\n            }\n\n            val = typeof val === 'string' ? +val : val;\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addSubtract (mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (months) {\n            setMonth(mom, get(mom, 'Month') + months * isAdding);\n        }\n        if (days) {\n            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n        }\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add      = createAdder(1, 'add');\n    var subtract = createAdder(-1, 'subtract');\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n    }\n\n    function calendar$1 (time, formats) {\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = hooks.calendarFormat(this, sod) || 'sameElse';\n\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n\n        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));\n    }\n\n    function clone () {\n        return new Moment(this);\n    }\n\n    function isAfter (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween (from, to, units, inclusivity) {\n        inclusivity = inclusivity || '()';\n        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&\n            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));\n    }\n\n    function isSame (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units || 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n        }\n    }\n\n    function isSameOrAfter (input, units) {\n        return this.isSame(input, units) || this.isAfter(input,units);\n    }\n\n    function isSameOrBefore (input, units) {\n        return this.isSame(input, units) || this.isBefore(input,units);\n    }\n\n    function diff (input, units, asFloat) {\n        var that,\n            zoneDelta,\n            output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        switch (units) {\n            case 'year': output = monthDiff(this, that) / 12; break;\n            case 'month': output = monthDiff(this, that); break;\n            case 'quarter': output = monthDiff(this, that) / 3; break;\n            case 'second': output = (this - that) / 1e3; break; // 1000\n            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60\n            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60\n            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst\n            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst\n            default: output = this - that;\n        }\n\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff (a, b) {\n        // difference in months\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2, adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString () {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function toISOString(keepOffset) {\n        if (!this.isValid()) {\n            return null;\n        }\n        var utc = keepOffset !== true;\n        var m = utc ? this.clone().utc() : this;\n        if (m.year() < 0 || m.year() > 9999) {\n            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');\n        }\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            if (utc) {\n                return this.toDate().toISOString();\n            } else {\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));\n            }\n        }\n        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');\n    }\n\n    /**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */\n    function inspect () {\n        if (!this.isValid()) {\n            return 'moment.invalid(/* ' + this._i + ' */)';\n        }\n        var func = 'moment';\n        var zone = '';\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n            zone = 'Z';\n        }\n        var prefix = '[' + func + '(\"]';\n        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';\n        var datetime = '-MM-DD[T]HH:mm:ss.SSS';\n        var suffix = zone + '[\")]';\n\n        return this.format(prefix + year + datetime + suffix);\n    }\n\n    function format (inputString) {\n        if (!inputString) {\n            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow (withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n\n    function to (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow (withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale (key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData () {\n        return this._locale;\n    }\n\n    function startOf (units) {\n        units = normalizeUnits(units);\n        // the following switch intentionally omits break keywords\n        // to utilize falling through the cases.\n        switch (units) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'quarter':\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'week':\n            case 'isoWeek':\n            case 'day':\n            case 'date':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n        }\n\n        // weeks are a special case\n        if (units === 'week') {\n            this.weekday(0);\n        }\n        if (units === 'isoWeek') {\n            this.isoWeekday(1);\n        }\n\n        // quarters are also special\n        if (units === 'quarter') {\n            this.month(Math.floor(this.month() / 3) * 3);\n        }\n\n        return this;\n    }\n\n    function endOf (units) {\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond') {\n            return this;\n        }\n\n        // 'date' is an alias for 'day', so it should be considered as such.\n        if (units === 'date') {\n            units = 'day';\n        }\n\n        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');\n    }\n\n    function valueOf () {\n        return this._d.valueOf() - ((this._offset || 0) * 60000);\n    }\n\n    function unix () {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate () {\n        return new Date(this.valueOf());\n    }\n\n    function toArray () {\n        var m = this;\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n    }\n\n    function toObject () {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds()\n        };\n    }\n\n    function toJSON () {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function isValid$2 () {\n        return isValid(this);\n    }\n\n    function parsingFlags () {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt () {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict\n        };\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken (token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg',     'weekYear');\n    addWeekYearFormatToken('ggggg',    'weekYear');\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n\n    // PARSING\n\n    addRegexToken('G',      matchSigned);\n    addRegexToken('g',      matchSigned);\n    addRegexToken('GG',     match1to2, match2);\n    addRegexToken('gg',     match1to2, match2);\n    addRegexToken('GGGG',   match1to4, match4);\n    addRegexToken('gggg',   match1to4, match4);\n    addRegexToken('GGGGG',  match1to6, match6);\n    addRegexToken('ggggg',  match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input,\n                this.week(),\n                this.weekday(),\n                this.localeData()._week.dow,\n                this.localeData()._week.doy);\n    }\n\n    function getSetISOWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);\n    }\n\n    function getISOWeeksInYear () {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getWeeksInYear () {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter (input) {\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIORITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D',  match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        return isStrict ?\n          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :\n          locale._dayOfMonthOrdinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD',  match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear (input) {\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m',  match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s',  match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S',    match1to3, match1);\n    addRegexToken('SS',   match1to3, match2);\n    addRegexToken('SSS',  match1to3, match3);\n\n    var token;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n    // MOMENTS\n\n    var getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z',  0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr () {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName () {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var proto = Moment.prototype;\n\n    proto.add               = add;\n    proto.calendar          = calendar$1;\n    proto.clone             = clone;\n    proto.diff              = diff;\n    proto.endOf             = endOf;\n    proto.format            = format;\n    proto.from              = from;\n    proto.fromNow           = fromNow;\n    proto.to                = to;\n    proto.toNow             = toNow;\n    proto.get               = stringGet;\n    proto.invalidAt         = invalidAt;\n    proto.isAfter           = isAfter;\n    proto.isBefore          = isBefore;\n    proto.isBetween         = isBetween;\n    proto.isSame            = isSame;\n    proto.isSameOrAfter     = isSameOrAfter;\n    proto.isSameOrBefore    = isSameOrBefore;\n    proto.isValid           = isValid$2;\n    proto.lang              = lang;\n    proto.locale            = locale;\n    proto.localeData        = localeData;\n    proto.max               = prototypeMax;\n    proto.min               = prototypeMin;\n    proto.parsingFlags      = parsingFlags;\n    proto.set               = stringSet;\n    proto.startOf           = startOf;\n    proto.subtract          = subtract;\n    proto.toArray           = toArray;\n    proto.toObject          = toObject;\n    proto.toDate            = toDate;\n    proto.toISOString       = toISOString;\n    proto.inspect           = inspect;\n    proto.toJSON            = toJSON;\n    proto.toString          = toString;\n    proto.unix              = unix;\n    proto.valueOf           = valueOf;\n    proto.creationData      = creationData;\n    proto.year       = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n    proto.weekYear    = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n    proto.quarter = proto.quarters = getSetQuarter;\n    proto.month       = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n    proto.week           = proto.weeks        = getSetWeek;\n    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;\n    proto.weeksInYear    = getWeeksInYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n    proto.date       = getSetDayOfMonth;\n    proto.day        = proto.days             = getSetDayOfWeek;\n    proto.weekday    = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear  = getSetDayOfYear;\n    proto.hour = proto.hours = getSetHour;\n    proto.minute = proto.minutes = getSetMinute;\n    proto.second = proto.seconds = getSetSecond;\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n    proto.utcOffset            = getSetOffset;\n    proto.utc                  = setOffsetToUTC;\n    proto.local                = setOffsetToLocal;\n    proto.parseZone            = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST                = isDaylightSavingTime;\n    proto.isLocal              = isLocal;\n    proto.isUtcOffset          = isUtcOffset;\n    proto.isUtc                = isUtc;\n    proto.isUTC                = isUtc;\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\n    function createUnix (input) {\n        return createLocal(input * 1000);\n    }\n\n    function createInZone () {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat (string) {\n        return string;\n    }\n\n    var proto$1 = Locale.prototype;\n\n    proto$1.calendar        = calendar;\n    proto$1.longDateFormat  = longDateFormat;\n    proto$1.invalidDate     = invalidDate;\n    proto$1.ordinal         = ordinal;\n    proto$1.preparse        = preParsePostFormat;\n    proto$1.postformat      = preParsePostFormat;\n    proto$1.relativeTime    = relativeTime;\n    proto$1.pastFuture      = pastFuture;\n    proto$1.set             = set;\n\n    proto$1.months            =        localeMonths;\n    proto$1.monthsShort       =        localeMonthsShort;\n    proto$1.monthsParse       =        localeMonthsParse;\n    proto$1.monthsRegex       = monthsRegex;\n    proto$1.monthsShortRegex  = monthsShortRegex;\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n\n    proto$1.weekdays       =        localeWeekdays;\n    proto$1.weekdaysMin    =        localeWeekdaysMin;\n    proto$1.weekdaysShort  =        localeWeekdaysShort;\n    proto$1.weekdaysParse  =        localeWeekdaysParse;\n\n    proto$1.weekdaysRegex       =        weekdaysRegex;\n    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;\n    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;\n\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n\n    function get$1 (format, index, field, setter) {\n        var locale = getLocale();\n        var utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl (format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return get$1(format, index, field, 'month');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = get$1(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl (localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = getLocale(),\n            shift = localeSorted ? locale._week.dow : 0;\n\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, 'day');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 7; i++) {\n            out[i] = get$1(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function listMonths (format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function listMonthsShort (format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function listWeekdays (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function listWeekdaysShort (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function listWeekdaysMin (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    getSetGlobalLocale('en', {\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    // Side effect imports\n\n    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);\n    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);\n\n    var mathAbs = Math.abs;\n\n    function abs () {\n        var data           = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days         = mathAbs(this._days);\n        this._months       = mathAbs(this._months);\n\n        data.milliseconds  = mathAbs(data.milliseconds);\n        data.seconds       = mathAbs(data.seconds);\n        data.minutes       = mathAbs(data.minutes);\n        data.hours         = mathAbs(data.hours);\n        data.months        = mathAbs(data.months);\n        data.years         = mathAbs(data.years);\n\n        return this;\n    }\n\n    function addSubtract$1 (duration, input, value, direction) {\n        var other = createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days         += direction * other._days;\n        duration._months       += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function add$1 (input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function subtract$1 (input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n\n    function absCeil (number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble () {\n        var milliseconds = this._milliseconds;\n        var days         = this._days;\n        var months       = this._months;\n        var data         = this._data;\n        var seconds, minutes, hours, years, monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds           = absFloor(milliseconds / 1000);\n        data.seconds      = seconds % 60;\n\n        minutes           = absFloor(seconds / 60);\n        data.minutes      = minutes % 60;\n\n        hours             = absFloor(minutes / 60);\n        data.hours        = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days   = days;\n        data.months = months;\n        data.years  = years;\n\n        return this;\n    }\n\n    function daysToMonths (days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return days * 4800 / 146097;\n    }\n\n    function monthsToDays (months) {\n        // the reverse of daysToMonths\n        return months * 146097 / 4800;\n    }\n\n    function as (units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'year') {\n            days   = this._days   + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            return units === 'month' ? months : months / 12;\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week'   : return days / 7     + milliseconds / 6048e5;\n                case 'day'    : return days         + milliseconds / 864e5;\n                case 'hour'   : return days * 24    + milliseconds / 36e5;\n                case 'minute' : return days * 1440  + milliseconds / 6e4;\n                case 'second' : return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\n                default: throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function valueOf$1 () {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs (alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms');\n    var asSeconds      = makeAs('s');\n    var asMinutes      = makeAs('m');\n    var asHours        = makeAs('h');\n    var asDays         = makeAs('d');\n    var asWeeks        = makeAs('w');\n    var asMonths       = makeAs('M');\n    var asYears        = makeAs('y');\n\n    function clone$1 () {\n        return createDuration(this);\n    }\n\n    function get$2 (units) {\n        units = normalizeUnits(units);\n        return this.isValid() ? this[units + 's']() : NaN;\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this.isValid() ? this._data[name] : NaN;\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds');\n    var seconds      = makeGetter('seconds');\n    var minutes      = makeGetter('minutes');\n    var hours        = makeGetter('hours');\n    var days         = makeGetter('days');\n    var months       = makeGetter('months');\n    var years        = makeGetter('years');\n\n    function weeks () {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round;\n    var thresholds = {\n        ss: 44,         // a few seconds to seconds\n        s : 45,         // seconds to minute\n        m : 45,         // minutes to hour\n        h : 22,         // hours to day\n        d : 26,         // days to month\n        M : 11          // months to year\n    };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {\n        var duration = createDuration(posNegDuration).abs();\n        var seconds  = round(duration.as('s'));\n        var minutes  = round(duration.as('m'));\n        var hours    = round(duration.as('h'));\n        var days     = round(duration.as('d'));\n        var months   = round(duration.as('M'));\n        var years    = round(duration.as('y'));\n\n        var a = seconds <= thresholds.ss && ['s', seconds]  ||\n                seconds < thresholds.s   && ['ss', seconds] ||\n                minutes <= 1             && ['m']           ||\n                minutes < thresholds.m   && ['mm', minutes] ||\n                hours   <= 1             && ['h']           ||\n                hours   < thresholds.h   && ['hh', hours]   ||\n                days    <= 1             && ['d']           ||\n                days    < thresholds.d   && ['dd', days]    ||\n                months  <= 1             && ['M']           ||\n                months  < thresholds.M   && ['MM', months]  ||\n                years   <= 1             && ['y']           || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding (roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof(roundingFunction) === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold (threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        if (threshold === 's') {\n            thresholds.ss = limit - 1;\n        }\n        return true;\n    }\n\n    function humanize (withSuffix) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var locale = this.localeData();\n        var output = relativeTime$1(this, !withSuffix, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var abs$1 = Math.abs;\n\n    function sign(x) {\n        return ((x > 0) - (x < 0)) || +x;\n    }\n\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var seconds = abs$1(this._milliseconds) / 1000;\n        var days         = abs$1(this._days);\n        var months       = abs$1(this._months);\n        var minutes, hours, years;\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes           = absFloor(seconds / 60);\n        hours             = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years  = absFloor(months / 12);\n        months %= 12;\n\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        var Y = years;\n        var M = months;\n        var D = days;\n        var h = hours;\n        var m = minutes;\n        var s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\n        var total = this.asSeconds();\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        var totalSign = total < 0 ? '-' : '';\n        var ymSign = sign(this._months) !== sign(total) ? '-' : '';\n        var daysSign = sign(this._days) !== sign(total) ? '-' : '';\n        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\n\n        return totalSign + 'P' +\n            (Y ? ymSign + Y + 'Y' : '') +\n            (M ? ymSign + M + 'M' : '') +\n            (D ? daysSign + D + 'D' : '') +\n            ((h || m || s) ? 'T' : '') +\n            (h ? hmsSign + h + 'H' : '') +\n            (m ? hmsSign + m + 'M' : '') +\n            (s ? hmsSign + s + 'S' : '');\n    }\n\n    var proto$2 = Duration.prototype;\n\n    proto$2.isValid        = isValid$1;\n    proto$2.abs            = abs;\n    proto$2.add            = add$1;\n    proto$2.subtract       = subtract$1;\n    proto$2.as             = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds      = asSeconds;\n    proto$2.asMinutes      = asMinutes;\n    proto$2.asHours        = asHours;\n    proto$2.asDays         = asDays;\n    proto$2.asWeeks        = asWeeks;\n    proto$2.asMonths       = asMonths;\n    proto$2.asYears        = asYears;\n    proto$2.valueOf        = valueOf$1;\n    proto$2._bubble        = bubble;\n    proto$2.clone          = clone$1;\n    proto$2.get            = get$2;\n    proto$2.milliseconds   = milliseconds;\n    proto$2.seconds        = seconds;\n    proto$2.minutes        = minutes;\n    proto$2.hours          = hours;\n    proto$2.days           = days;\n    proto$2.weeks          = weeks;\n    proto$2.months         = months;\n    proto$2.years          = years;\n    proto$2.humanize       = humanize;\n    proto$2.toISOString    = toISOString$1;\n    proto$2.toString       = toISOString$1;\n    proto$2.toJSON         = toISOString$1;\n    proto$2.locale         = locale;\n    proto$2.localeData     = localeData;\n\n    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);\n    proto$2.lang = lang;\n\n    // Side effect imports\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input, 10) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    // Side effect imports\n\n\n    hooks.version = '2.22.1';\n\n    setHookCallback(createLocal);\n\n    hooks.fn                    = proto;\n    hooks.min                   = min;\n    hooks.max                   = max;\n    hooks.now                   = now;\n    hooks.utc                   = createUTC;\n    hooks.unix                  = createUnix;\n    hooks.months                = listMonths;\n    hooks.isDate                = isDate;\n    hooks.locale                = getSetGlobalLocale;\n    hooks.invalid               = createInvalid;\n    hooks.duration              = createDuration;\n    hooks.isMoment              = isMoment;\n    hooks.weekdays              = listWeekdays;\n    hooks.parseZone             = createInZone;\n    hooks.localeData            = getLocale;\n    hooks.isDuration            = isDuration;\n    hooks.monthsShort           = listMonthsShort;\n    hooks.weekdaysMin           = listWeekdaysMin;\n    hooks.defineLocale          = defineLocale;\n    hooks.updateLocale          = updateLocale;\n    hooks.locales               = listLocales;\n    hooks.weekdaysShort         = listWeekdaysShort;\n    hooks.normalizeUnits        = normalizeUnits;\n    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat        = getCalendarFormat;\n    hooks.prototype             = proto;\n\n    // currently HTML5 input type only supports 24-hour formats\n    hooks.HTML5_FMT = {\n        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type=\"datetime-local\" />\n        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type=\"datetime-local\" step=\"1\" />\n        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type=\"datetime-local\" step=\"0.001\" />\n        DATE: 'YYYY-MM-DD',                             // <input type=\"date\" />\n        TIME: 'HH:mm',                                  // <input type=\"time\" />\n        TIME_SECONDS: 'HH:mm:ss',                       // <input type=\"time\" step=\"1\" />\n        TIME_MS: 'HH:mm:ss.SSS',                        // <input type=\"time\" step=\"0.001\" />\n        WEEK: 'YYYY-[W]WW',                             // <input type=\"week\" />\n        MONTH: 'YYYY-MM'                                // <input type=\"month\" />\n    };\n\n    return hooks;\n\n})));\n","\"use strict\";\n/*\n    Main function and entry point\n    Can be registered to a videojs instance as a plugin\n*/\n\nrequire('./lib/polyfills');\n\nconst Plugin = videojs.getPlugin('plugin'),\n      Utils = require('./lib/utils'),\n      Controls = require(\"./components/controls\").class,\n      AnnotationState = require(\"./components/annotation_state\").class,\n      EventDispatcher = require(\"./lib/event_dispatcher\").class;\n\nconst DEFAULT_OPTIONS = Object.freeze({\n    bindArrowKeys:              true,\n    meta:                       { user_id: null, user_name: null },\n    annotationsObjects:         [],\n    showControls:               true,\n    showCommentList:            true,\n    showFullScreen:             true,\n    showMarkerShapeAndTooltips: true,\n    internalCommenting:         true,\n    startInAnnotationMode:      false\n});\n\nclass AnnotationComments extends Plugin {\n\n    constructor (player, options) {\n        options = Object.assign(Utils.cloneObject(DEFAULT_OPTIONS), options);\n        super(player, options);\n\n        this.eventDispatcher = new EventDispatcher(this);\n        this.eventDispatcher.registerListenersFor(this, 'AnnotationComments');\n\n        this.playerId = $(player.el()).attr('id');\n        this.player = player;\n        this.meta = options.meta;\n        this.options = options;\n\n        this._readyCallbacks = [];\n\n        // Assign reference to this class to player for access later by components where needed\n        player.annotationComments = (() => { return this }).bind(this);\n\n        // Assert that components are initialized AFTER metadata + play data is loaded so we metadata/duration\n        // NOTE - this check is required because player loadeddata doesn't always fire if readystate is > 3\n        if(player.readyState() >= 3){\n            this.postLoadDataConstructor();\n        }else{\n            player.on('loadeddata', this.postLoadDataConstructor.bind(this));\n        }\n    }\n\n    // Additional init/setup after video data + metadata is available\n    postLoadDataConstructor () {\n        // setup initial state and render UI\n        this.annotationState = new AnnotationState(this.playerId);\n        this.annotationState.annotations = this.options.annotationsObjects;\n\n        this.controls = new Controls(this.playerId, this.options.bindArrowKeys);\n        this.bindEvents();\n        this.setBounds(false);\n        if(this.options.startInAnnotationMode) this.toggleAnnotationMode();\n\n        this.pluginReady();\n    }\n\n    // Bind needed events for interaction w/ components\n    bindEvents () {\n        // Set player boundaries on window size change or fullscreen change\n        $(window).on('resize.vac-window-resize', Utils.throttle(this.setBounds.bind(this), 500));\n        this.player.on('fullscreenchange', Utils.throttle(this.setBounds.bind(this), 500));\n\n        // Remove annotation features on fullscreen if showFullScreen: false\n        if (!this.options.showFullScreen) {\n            this.player.on('fullscreenchange', (() => {\n                if (this.player.isFullscreen_) {\n                    this.preFullscreenAnnotationsEnabled = this.active;\n                    $(this.player.el()).addClass('vac-disable-fullscreen');\n                } else {\n                    $(this.player.el()).removeClass('vac-disable-fullscreen');\n                }\n                if(this.preFullscreenAnnotationsEnabled){\n                    // If we were previously in annotation mode (pre-fullscreen) or entering fullscreeen and are\n                    // in annotation mode, toggle the mode\n                    this.toggleAnnotationMode();\n                }\n            }).bind(this));\n        }\n    }\n\n    // A wrapper func to make it easier to use EventDispatcher from the client\n    // Ex: plugin.fire(type, data);\n    fire (type, data={}) {\n        this.eventDispatcher.fire(type, data);\n    }\n\n    // Toggle annotations mode on/off\n    toggleAnnotationMode() {\n        this.active = !this.active;\n        this.player.toggleClass('vac-active'); // Toggle global class to player to toggle display of elements\n        this.annotationState.enabled = this.active;\n\n        if(this.active){\n            this.fire(\"annotationModeEnabled\");\n        }else{\n            this.fire(\"annotationModeDisabled\")\n        }\n\n        // Handle control component UI if showControls: true\n        if(this.options.showControls){\n            if(!this.active){\n                this.controls.clear(true);\n            }else{\n                this.controls.render();\n            }\n        }\n    }\n\n    // Set player UI boundaries\n    setBounds (triggerChange=true) {\n        this.bounds = {};\n        let $player = $(this.player.el()),\n            $ctrls  = $player.find('.vjs-control-bar');\n\n        this.bounds.left = $player.offset().left;\n        this.bounds.top = $player.offset().top;\n        this.bounds.right = this.bounds.left + $player.width();\n        this.bounds.bottom = this.bounds.top + $player.height();\n        this.bounds.bottomWithoutControls = this.bounds.bottom - $ctrls.height();\n\n        // fires an event when bounds have changed during resizing\n        if(triggerChange) this.fire('playerBoundsChanged', this.bounds);\n    }\n\n    // Public function to register a callback for when plugin is ready\n    onReady (callback) {\n        if(this.eventDispatcher.pluginReady){\n            return callback();\n        }\n        this._readyCallbacks.push(callback);\n    }\n\n    // Mark plugin as ready and fire any pending callbacks\n    pluginReady () {\n        this.eventDispatcher.pluginReady = true;\n        while(this._readyCallbacks.length){\n            this._readyCallbacks.pop()();\n        }\n    }\n\n    // Teardown all components, remove all listeners, and remove elements from DOM\n    dispose () {\n        this.controls = this.controls.teardown();\n        this.annotationState = this.annotationState.teardown();\n        this.eventDispatcher = this.eventDispatcher.teardown();\n        this.teardown();\n        if(this.player) {\n            this.player.annotationComments = null;\n            $(this.player.el()).removeClass('vac-active');\n            $(this.player.el()).find(\"[class^='vac-']\").remove();\n        }\n        super.dispose();\n    }\n\n    teardown () {\n        if(this.player) this.player.off('fullscreenchange');\n        $(window).off('resize.vac-window-resize');\n    }\n}\n\nmodule.exports = { class: AnnotationComments };\n","var Handlebars = require(\"handlebars/runtime\");\n exports[\"comment\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"<div class=\\\"vac-comment\\\" data-id=\\\"\"\n    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\\n  <div class=\\\"vac-comment-header\\\">\\n    <div class=\\\"vac-author-name\\\">\"\n    + alias4(container.lambda(((stack1 = (depth0 != null ? depth0.meta : depth0)) != null ? stack1.user_name : stack1), depth0))\n    + \"</div>\\n    <div class=\\\"vac-timestamp\\\">\"\n    + alias4(((helper = (helper = helpers.timeSince || (depth0 != null ? depth0.timeSince : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"timeSince\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\n      <span class=\\\"vac-delete-comment\\\">&nbsp;&nbsp;X</span>\\n    </div>\\n  </div>\\n  <div class=\\\"vac-comment-body\\\">\\n    \"\n    + alias4((helpers.breaklines || (depth0 && depth0.breaklines) || alias2).call(alias1,(depth0 != null ? depth0.body : depth0),{\"name\":\"breaklines\",\"hash\":{},\"data\":data}))\n    + \"\\n  </div>\\n</div>\\n\";\n},\"useData\":true});\nexports[\"comment_list\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data,blockParams) {\n    var stack1;\n\n  return \"      \"\n    + ((stack1 = container.lambda(blockParams[0][0], depth0)) != null ? stack1 : \"\")\n    + \"\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data,blockParams) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {});\n\n  return \"<div class=\\\"vac-comments-container\\\">\\n  <div class=\\\"vac-comments-wrap\\\">\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.commentsHTML : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 1, blockParams),\"inverse\":container.noop,\"data\":data,\"blockParams\":blockParams})) != null ? stack1 : \"\")\n    + \"    <div class=\\\"vac-reply-btn vac-button\\\">ADD REPLY</div>\\n    <div class=\\\"vac-add-new-shapebox\\\"></div>\\n  </div>\\n  <div class=\\\"vac-comments-control-bar\\\">\\n    <div class=\\\"vac-range\\\"><b>@</b> \"\n    + container.escapeExpression(((helper = (helper = helpers.rangeStr || (depth0 != null ? depth0.rangeStr : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"rangeStr\",\"hash\":{},\"data\":data,\"blockParams\":blockParams}) : helper)))\n    + \"</div>\\n    <div class=\\\"vac-control-buttons\\\">\\n      <a class=\\\"vac-delete-annotation\\\">DELETE</a> | <a class=\\\"vac-close-comment-list\\\">CLOSE</a>\\n    </div>\\n  </div>\\n</div>\\n\";\n},\"useData\":true,\"useBlockParams\":true});\nexports[\"controls\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? depth0.showControls : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"        <div class=\\\"vac-controls vac-control\\\">\\n            <button class=\\\"vac-button\\\">+ NEW</button>\\n\"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? depth0.showNav : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"        </div>\\n\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    return \"                <div class=\\\"vac-annotation-nav\\\">\\n                    <div class=\\\"vac-a-prev\\\">Prev</div>\\n                    <div class=\\\"vac-a-next\\\">Next</div>\\n                </div>\\n\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {});\n\n  return \"    <div class=\\\"vac-video-cover vac-control\\\">\\n        <div class=\\\"vac-video-cover-canvas\\\">\\n            <div class=\\\"vac-cursor-tool-tip vac-hidden\\\">Click and drag to select</div>\\n        </div>\\n    </div>\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.showControls : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.writingComment : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(9, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"6\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"        <div class=\\\"vac-add-controls vac-control\\\">\\n            <i>Select shape + range</i>\\n\"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? depth0.internalCommenting : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"            <div class=\\\"vac-video-move\\\">\\n                <div class=\\\"vac-a-prev\\\">-1 sec</div>\\n                <div class=\\\"vac-a-next\\\">+1 sec</div>\\n            </div>\\n        </div>\\n\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    return \"                <button class=\\\"vac-button\\\">CONTINUE</button>\\n                <a>cancel</a>\\n\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"        <div class=\\\"vac-video-write-new-wrap vac-control\\\">\\n            <div class=\\\"vac-video-write-new vac-is-annotation\\\">\\n                <div>\\n                    <h5><b>New Annotation</b> @ \"\n    + container.escapeExpression(((helper = (helper = helpers.rangeStr || (depth0 != null ? depth0.rangeStr : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{\"name\":\"rangeStr\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</h5>\\n                    <div class=\\\"vac-comment-showbox\\\">\\n                        <textarea placeholder=\\\"Enter comment...\\\"></textarea>\\n                        <div>\\n                            <button class=\\\"vac-button\\\">SAVE</button>\\n                            <a>Cancel</a>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {});\n\n  return ((stack1 = helpers.unless.call(alias1,(depth0 != null ? depth0.adding : depth0),{\"name\":\"unless\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.adding : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"useData\":true});\nexports[\"draggable_marker\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"<div data-marker-id=\\\"\"\n    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" class=\\\"vac-marker-draggable vac-ranged-marker\\\" style=\\\"left: \"\n    + alias4(((helper = (helper = helpers.left || (depth0 != null ? depth0.left : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"left\",\"hash\":{},\"data\":data}) : helper)))\n    + \"; width:\"\n    + alias4(((helper = (helper = helpers.width || (depth0 != null ? depth0.width : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"width\",\"hash\":{},\"data\":data}) : helper)))\n    + \";\\\">\\n</div>\\n\";\n},\"useData\":true});\nexports[\"marker\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"vac-ranged-marker\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"width:\"\n    + container.escapeExpression(((helper = (helper = helpers.width || (depth0 != null ? depth0.width : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{\"name\":\"width\",\"hash\":{},\"data\":data}) : helper)))\n    + \";\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? depth0.tooltipBody : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"6\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"            <div>\\n                <span class=\\\"vac-tooltip \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.tooltipRight : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\">\\n                    <b>\"\n    + alias4(((helper = (helper = helpers.tooltipTime || (depth0 != null ? depth0.tooltipTime : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"tooltipTime\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</b> - \"\n    + alias4(((helper = (helper = helpers.tooltipBody || (depth0 != null ? depth0.tooltipBody : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"tooltipBody\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\n                </span>\\n            </div>\\n\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    return \"vac-right-side\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"<div data-marker-id=\\\"\"\n    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" class=\\\"vac-marker \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.rangeShow : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\" style=\\\"left: \"\n    + alias4(((helper = (helper = helpers.left || (depth0 != null ? depth0.left : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"left\",\"hash\":{},\"data\":data}) : helper)))\n    + \"; \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.rangeShow : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" z-index: \"\n    + alias4(((helper = (helper = helpers.zIndex || (depth0 != null ? depth0.zIndex : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"zIndex\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.showTooltip : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"</div>\\n\";\n},\"useData\":true});\nexports[\"marker_wrap\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    return \"<div class=\\\"vac-marker-owrap\\\">\\n\t<div class=\\\"vac-marker-wrap\\\"></div>\\n</div>\";\n},\"useData\":true});\nexports[\"new_comment\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"<div class=\\\"vac-video-write-new-wrap vac-new-comment\\\">\\n  <div class=\\\"vac-video-write-new vac-is-comment\\\">\\n    <div class=\\\"vac-comment-showbox\\\" style=\\\"width:\"\n    + alias4(((helper = (helper = helpers.width || (depth0 != null ? depth0.width : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"width\",\"hash\":{},\"data\":data}) : helper)))\n    + \"px;top:\"\n    + alias4(((helper = (helper = helpers.top || (depth0 != null ? depth0.top : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"top\",\"hash\":{},\"data\":data}) : helper)))\n    + \"px;right:\"\n    + alias4(((helper = (helper = helpers.right || (depth0 != null ? depth0.right : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"right\",\"hash\":{},\"data\":data}) : helper)))\n    + \"px\\\">\\n      <textarea placeholder=\\\"Enter comment...\\\"></textarea>\\n      <div>\\n        <button class=\\\"vac-button\\\">SAVE</button>\\n        <a>Cancel</a>\\n      </div>\\n    </div>\\n</div>\\n\";\n},\"useData\":true});\nexports[\"player_button\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    return \"<b></b>\\n<i class=\\\"vac-player-icon\\\">\\n\t<svg height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n\t    <path d=\\\"M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18zM18 14H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z\\\"/>\\n\t    <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/>\\n\t</svg>\\n</i>\";\n},\"useData\":true});","\"use strict\";\n/*\n    Component for an annotation, which includes controlling the marker/shape, rendering a commentList, etc\n*/\n\nconst   PlayerUIComponent = require(\"./../lib/player_ui_component\").class,\n        Utils = require(\"./../lib/utils.js\"),\n        CommentList = require(\"./comment_list\").class,\n        Marker = require(\"./marker\").class,\n        Comment = require(\"./comment\").class,\n        Shape = require(\"./shape\").class;\n\nclass Annotation extends PlayerUIComponent {\n\n    constructor (data, playerId) {\n        super(playerId);\n        this.id = data.id || this.componentId;\n        this.range = data.range;\n        this.shape = data.shape;\n        this.secondsActive = this.buildSecondsActiveArray();\n        this.buildComments(data);\n        this.buildMarker();\n        this.buildShape();\n        this.bindEvents();\n\n        this.isOpen = false;\n    }\n\n    buildComments(data) {\n        this.commentList = new CommentList(\n            {\"comments\": data.comments, \"annotation\": this},\n            this.playerId\n        );\n    }\n\n    buildMarker () {\n        this.marker = new Marker(this.playerId, this.range, this.commentList.comments[0]);\n        this.marker.render();\n    }\n\n    buildShape() {\n        this.annotationShape = new Shape(this.playerId, this.shape);\n    }\n\n    // Serialize object\n    get data () {\n        return {\n            id:         this.id,\n            range:      this.range,\n            shape:      this.shape,\n            comments:   this.commentList.data\n        };\n    }\n\n    bindEvents () {\n        this.marker.$el.on('click.vac-marker', (e) => this.plugin.annotationState.openAnnotation(this, true));\n    }\n\n    // Opens the annotation. Handles marker, commentList, shape, Annotation state, and player state\n    open (withPause=true, previewOnly=false, forceSnapToStart=false) {\n        this.isOpen = true;\n        const snapToStart = forceSnapToStart || !Utils.isWithinRange(\n            this.range.start,\n            this.range.end,\n            Math.floor(this.currentTime)\n        );\n\n        let showTooltip = previewOnly && this.plugin.options.showMarkerShapeAndTooltips;\n        this.marker.setActive(showTooltip);\n        if(!previewOnly && this.plugin.options.showCommentList){\n            this.commentList.render();\n        }\n\n        if(!previewOnly || (previewOnly && this.plugin.options.showMarkerShapeAndTooltips)){\n            this.annotationShape.render();\n\n            if(this.shape) {\n                this.annotationShape.$el.on(\"click.vac-annotation\", () => {\n                    this.plugin.annotationState.openAnnotation(this, false, false, false);\n                });\n            }\n        }\n\n        if(withPause) this.player.pause();\n        if(snapToStart) this.currentTime = this.range.start;\n\n        this.plugin.fire('annotationOpened', {\n            annotation: this.data,\n            triggered_by_timeline: previewOnly\n        });\n    }\n\n    // Closes the annotation. Handles marker, commendList, shape, and AnnotationState\n    close (clearActive=true) {\n        if(!this.isOpen) return;\n        this.isOpen = false;\n        this.marker.deactivate();\n        this.commentList.teardown(false);\n        if(this.annotationShape.$el) this.annotationShape.$el.off(\"click.vac-annotation\");\n        this.annotationShape.teardown();\n        if(clearActive) this.plugin.annotationState.clearActive();\n        this.plugin.fire('annotationClosed', this.data);\n    }\n\n    // For preloading an array of seconds active on initialization\n    // Values used to build timeMap in AnnotationState\n    buildSecondsActiveArray () {\n        let seconds = [];\n        if(!!this.range.end) {\n            for (let i = this.range.start; i <= this.range.end; i++) {\n                seconds.push(i);\n            }\n        } else {\n            let start = this.range.start;\n            seconds.push(start);\n            if(start < this.duration) seconds.push(start+1);\n        }\n        return seconds;\n    }\n\n    // Tearsdown annotation and marker, removes object from AnnotationState\n    teardown (removeFromCollection=true) {\n        this.close(true);\n        this.marker.teardown();\n        if(this.commentList) this.commentList.teardown(removeFromCollection);\n        if(removeFromCollection) this.plugin.annotationState.removeAnnotation(this);\n        if(this.annotationShape) this.annotationShape.teardown();\n    }\n\n    // Build a new annotation instance by passing in data for range, shape, comment, & plugin ref\n    static newFromData (range, shape, commentStr, plugin, id=null) {\n        let comment = Comment.dataObj(commentStr, plugin);\n        if(range) range = Utils.parseIntObj(range);\n        if(shape) shape = Utils.parseIntObj(shape);\n        let data = {\n            id,\n            range,\n            shape,\n            comments: [comment]\n        };\n        return new Annotation(data, plugin.playerId);\n    }\n\n    get isActive () {\n        return this.plugin.annotationState.activeAnnotation === this;\n    }\n}\n\nmodule.exports = {\n    class: Annotation\n};\n","\"use strict\";\n/*\n    Component for managing the state of annotations, including showing active annotation during playback,\n    toggling active states for annotations, navigating annotations forward/back, etc\n*/\n\nconst   Utils = require('./../lib/utils'),\n        PlayerComponent = require(\"./../lib/player_component\").class,\n        Annotation = require(\"./annotation\").class;\n\nclass AnnotationState extends PlayerComponent {\n\n    constructor (playerId) {\n        super(playerId);\n        this.initAPI(this, 'AnnotationState');\n        this.resetData();\n        this.bindEvents();\n    }\n\n    // sets _enabled and closes or opens annotation as needed\n    set enabled (shouldBeEnabled) {\n        this._enabled = shouldBeEnabled;\n        if(!shouldBeEnabled) this.activeAnnotation.close();\n        if(shouldBeEnabled){\n            this.skipLiveCheck = false;\n            this.setLiveAnnotation();\n        }\n    }\n\n    get enabled () {\n        return this._enabled;\n    }\n\n    // Sets _annotations w/Annoation objects from input array\n    set annotations (annotationsData) {\n        this._annotations = annotationsData.map((a) => new Annotation(a, this.playerId));\n        this.sortAnnotations();\n        this.rebuildAnnotationTimeMap();\n    }\n\n    get annotations () {\n        return this._annotations;\n    }\n\n    set activeAnnotation (annotation=null) {\n        this._activeAnnotation = annotation;\n    }\n\n    // Get current active annotation or a null object with .close()\n    get activeAnnotation () {\n        return this._activeAnnotation || { close: (() => {}) };\n    }\n\n    // Serialize data\n    get data () {\n        return this._annotations.map((a) => a.data);\n    }\n\n    // Bind events for setting liveAnnotation on video time change\n    bindEvents () {\n        this.player.on(\"timeupdate\", Utils.throttle(this.setLiveAnnotation.bind(this), 100));\n    }\n\n    // Sort annotations by range.start\n    sortAnnotations () {\n        this._annotations.sort((a,b) => {\n            return a.range.start < b.range.start ? -1 : (a.range.start > b.range.start ? 1 : 0);\n        });\n    }\n\n    // Add a new annotation\n    addNewAnnotation (annotation) {\n        this._annotations.push(annotation);\n        this.openAnnotation(annotation, true, true, false, true);\n        this.stateChanged();\n    }\n\n    // Create and add a annotation\n    createAndAddAnnotation (data) {\n        this.plugin.controls.uiState.adding && this.plugin.controls.cancelAddNew();\n\n        let annotation = Annotation.newFromData(\n            data.range,\n            data.shape,\n            data.commentStr || \"\",\n            this.plugin,\n            data.id\n        )\n        this.addNewAnnotation(annotation)\n    }\n\n    // Destroy an existing annotation\n    destroyAnnotationById (id) {\n        let annotation = this.findAnnotation(id);\n        if (annotation) annotation.teardown();\n    }\n\n    // Remove an annotation\n    removeAnnotation (annotation) {\n        let id = annotation.id,\n            i = this._annotations.indexOf(annotation);\n        this._annotations.splice(i, 1);\n        this.stateChanged();\n        this.plugin.fire('annotationDeleted', {id});\n    }\n\n    // Set the live annotation based on current video time\n    setLiveAnnotation () {\n        if(!this.enabled) return;\n        let time = Math.floor(this.currentTime);\n\n        if(this.skipLiveCheck) {\n            if(time !== this.lastVideoTime) this.skipLiveCheck = false;\n            return;\n        }\n\n        let matches = this.activeAnnotationsForTime(time);\n        if(!matches.length) return this.activeAnnotation.close();\n\n        // Set live annotation as the last match\n        let liveAnnotation = this.annotations[matches[matches.length-1]];\n\n        // Special cases if this or another annotation is active\n        if(this.activeAnnotation.range) {\n            if(liveAnnotation === this.activeAnnotation) return;\n            // Check if the active annotation and live annotation share a start time\n            // Is that start time at the current playhead?\n            // If so, don't switch which is active.\n            let liveStart = liveAnnotation.range.start,\n                activeStart = this.activeAnnotation.range.start;\n            if(liveStart === activeStart && liveStart === time) return;\n        }\n\n        this.openAnnotation(liveAnnotation, false, false, true);\n    }\n\n    // Get all active annotations for a time (in seconds)\n    activeAnnotationsForTime (time) {\n        if(!this.annotations.length) return [];\n        return this.annotationTimeMap[time] || [];\n    }\n\n    /*\n        Rebuild the annotation time map\n        Example: this._annotations[1] and this._annotations[3] are active during second 4\n            this.annotationTimeMap = { 4: [1, 3] }\n    */\n    rebuildAnnotationTimeMap () {\n        let timeMap = {};\n        this.annotations.forEach((annotation) => {\n            annotation.secondsActive.forEach((second) => {\n                let val = (timeMap[second] || []);\n                val.push(this.annotations.indexOf(annotation));\n                timeMap[second] = val;\n            });\n        });\n        this.annotationTimeMap = timeMap;\n    }\n\n    // Close active annotation and remove reference in state\n    clearActive () {\n        this.activeAnnotation.close(false);\n        this._activeAnnotation = null;\n    }\n\n    // Open annotation with options to pause and show preview\n    // skipLiveCheck will short circuit setLiveAnnotation()\n    openAnnotation (annotation, skipLiveCheck=false, pause=true, previewOnly=false, forceSnapToStart=false) {\n        if(!this.plugin.active) this.plugin.toggleAnnotationMode();\n        this.skipLiveCheck = skipLiveCheck;\n        this.clearActive();\n        annotation.open(pause, previewOnly, forceSnapToStart);\n        this.activeAnnotation = annotation;\n        this.lastVideoTime = this.activeAnnotation.range.start;\n    }\n\n    // Open an annotation by ID (if it exists)\n    openAnnotationById (id) {\n        let annotation = this.findAnnotation(id);\n        if (annotation) this.openAnnotation(annotation);\n    }\n\n    // Returns annotation object given ID\n    findAnnotation (id) {\n        return this.annotations.find((a) => a.id == id);\n    }\n\n    // Returns comment object given ID\n    findComment (id) {\n        let comments = this.annotations.map((a) => a.commentList.comments);\n        comments = [].concat(...comments); // flatten 2d array\n        return comments.find((c) => c.id == id);\n    }\n\n    // Finds the next annotation in collection and opens it\n    nextAnnotation () {\n        if(this._activeAnnotation){\n            let ind = this.annotations.indexOf(this._activeAnnotation),\n                nextInd = (ind === this.annotations.length-1 ? 0 : ind+1);\n            return this.openAnnotation(this.annotations[nextInd], true);\n        }\n        let time = Math.floor(this.currentTime);\n        for(let i=0; i<this.annotations.length; i++){\n            if(this.annotations[i].range.start > time) return this.openAnnotation(this.annotations[i], true);\n        }\n        this.openAnnotation(this.annotations[0], true);\n    }\n\n    // Finds the previous annotation in collection and opens it\n    prevAnnotation () {\n        if(this._activeAnnotation){\n            let ind = this.annotations.indexOf(this._activeAnnotation),\n                    nextInd = (ind === 0 ? this.annotations.length-1 : ind-1);\n            return this.openAnnotation(this.annotations[nextInd], true);\n        }\n        let time = Math.floor(this.currentTime);\n        for(let i=this.annotations.length-1; i>=0; i--){\n            if(this.annotations[i].range.start < time) return this.openAnnotation(this.annotations[i], true);\n        }\n        this.openAnnotation(this.annotations[this.annotations.length-1], true);\n    }\n\n    // Use anywhere the annotation data changes\n    // Cleans internal state data, updates player button, triggers configurable callback\n    stateChanged () {\n        this.sortAnnotations();\n        this.rebuildAnnotationTimeMap();\n        this.plugin.fire('onStateChanged', this.data);\n    }\n\n    // Reset internal state properties\n    resetData () {\n        this.annotations       = [];\n        this.annotationTimeMap = {};\n        this.activeAnnotation  = null;\n        this.enabled           = false;\n        this.skipNextTimeCheck = false;\n        this.lastVideoTime     = 0;\n    }\n\n    // Remove UI and unbind events for this and child components\n    teardown() {\n        this.annotations.forEach((annotation) => { annotation.teardown(false); });\n        this.resetData();\n    }\n}\n\nmodule.exports = {\n    class: AnnotationState\n};\n","\"use strict\";\n/*\n  Component for an invidual comment\n*/\n\nconst   PlayerUIComponent = require(\"./../lib/player_ui_component\").class,\n        Utils = require(\"./../lib/utils\"),\n        moment = require(\"moment\"),\n        templateName = 'comment';\n\nclass Comment extends PlayerUIComponent {\n\n    constructor (data, playerId) {\n        super(playerId);\n        this.commentList = data.commentList;\n        this.id = data.id || this.componentId;\n        this.meta = data.meta;\n        this.body = data.body;\n        this.timestamp = moment(data.meta.datetime).unix();\n        this.timeSince = this.timeSince();\n\n        this.$el = $(this.render());\n    }\n\n    // Serialize data\n    get data () {\n        return {\n            id: this.id,\n            meta: this.meta,\n            body: this.body\n        };\n    }\n\n    get HTML () {\n        return this.$el[0].outerHTML;\n    }\n\n    render () {\n        return this.renderTemplate(\n            templateName,\n            {\n                id:         this.id,\n                body:       this.body,\n                meta:       this.meta,\n                timeSince:  this.timeSince\n            }\n        );\n    }\n\n    // Return time since comment timestamp\n    timeSince () {\n        return moment(this.meta.datetime).fromNow();\n    }\n\n    // Return a Comment obj given body content and plugin reference\n    static newFromData (body, commentList, plugin) {\n        let data = this.dataObj(body, plugin);\n        return new Comment(data, plugin.playerId);\n    }\n\n    // Return an object with plugin data, timestamp, unique id, and body content\n    static dataObj (body, plugin) {\n        return {\n            meta:   Object.assign({\n                        datetime: moment().toISOString()\n                    }, plugin.meta),\n            id:     Utils.guid(),\n            body\n        };\n    }\n}\n\nmodule.exports = {\n    class: Comment\n};\n","\"use strict\";\n/*\n  Component for a list of comments in a visible/active annotation\n*/\n\nconst   PlayerUIComponent = require(\"./../lib/player_ui_component\").class,\n        Utils = require(\"./../lib/utils\"),\n        Comment = require(\"./comment\").class,\n        commentListTemplateName = 'comment_list',\n        newCommentTemplateName = 'new_comment';\n\nclass CommentList extends PlayerUIComponent {\n\n    constructor (data, playerId) {\n        super(playerId);\n\n        this.annotation = data.annotation;\n        this.comments = data.comments.map((commentData) => {\n            commentData.commentList = this;\n            return new Comment(commentData, playerId);\n        });\n        this.sortComments();\n    }\n\n    // Serialize object\n    get data () {\n        return this.comments.map((c) => c.data);\n    }\n\n    // Bind all events needed for the comment list\n    bindListEvents () {\n        this.$el\n            .on(\"click.vac-comment\", \".vac-close-comment-list\", (() => this.annotation.close()).bind(this)) // Hide CommentList UI with close button\n            .on(\"click.vac-comment\", \".vac-reply-btn\", this.addNewComment.bind(this)) // Open new reply UI with reply button\n            .on(\"click.vac-comment\", \".vac-delete-annotation\", this.handleDeleteAnnotationClick.bind(this)) // Delete annotation with main delete button\n            .on(\"click.vac-comment\", \".vac-delete-comment\", this.destroyComment.bind(this)) // Delete comment with delete comment button\n            .on(\"mousewheel.vac-comment DOMMouseScroll.vac-comment\", \".vac-comments-wrap\", this.disablePageScroll.bind(this)); // Prevent outer page scroll when scrolling inside of the CommentList UI\n    }\n\n    // Bind event listeners for new comments form\n    bindCommentFormEvents () {\n        this.$newCommentForm\n            .on(\"click.vac-comment\", \".vac-add-controls a, .vac-video-write-new.vac-is-comment a\", this.closeNewComment.bind(this)) // Cancel new comment creation with cancel link\n            .on(\"click.vac-comment\", \".vac-video-write-new.vac-is-comment button\", this.saveNewComment.bind(this)); // Save new comment with save button\n    }\n\n    // Render CommentList UI with all comments using template\n    render () {\n        this.$el = $(this.renderTemplate(\n            commentListTemplateName,\n            {\n                commentsHTML: this.comments.map((c) => c.HTML),\n                rangeStr: Utils.humanTime(this.annotation.range)\n            }\n        ));\n\n        this.$player.append(this.$el);\n        this.$wrap = this.$UI.commentsContainer;\n        this.bindListEvents();\n    }\n\n    // Re-render UI on state change\n    reRender () {\n        this.teardown(false);\n        this.render();\n    }\n\n    // Render new comment form\n    addNewComment () {\n        this.$wrap.addClass(this.UI_CLASSES.active).find(\".vac-comments-wrap\").scrollTop(999999);\n        var $shapebox = this.$wrap.find(\".vac-add-new-shapebox\"),\n            width = $shapebox.outerWidth(),\n            top = $shapebox.position().top + 10,\n            right = this.$wrap.outerWidth() - ($shapebox.position().left + width);\n\n        this.$newCommentForm = $(this.renderTemplate(newCommentTemplateName, {width, top, right}));\n        this.bindCommentFormEvents();\n        this.$player.append(this.$newCommentForm);\n    }\n\n    // Save comment from new comment form, update state and re-render UI\n    saveNewComment () {\n        this.$wrap.removeClass(this.UI_CLASSES.active);\n\n        let user_id = 1,\n            body = this.$UI.newCommentTextarea.val();\n\n        if(!body) return; // empty comment - TODO add validation / err message\n        this.createComment(body);\n    }\n\n    createComment (body) {\n        let comment = Comment.newFromData(body, this, this.plugin);\n        this.comments.push(comment);\n        this.sortComments();\n\n        // Don't mutate UI if comment is being created for an inactive annotation (via API)\n        if(this.annotation.isActive) {\n            this.reRender(false);\n            this.closeNewComment();\n        }\n\n        this.plugin.annotationState.stateChanged();\n    }\n\n    // Cancel comment adding process\n    closeNewComment () {\n        this.unbindCommentFormEvents();\n        if(this.$wrap) this.$wrap.removeClass(this.UI_CLASSES.active);\n        if(this.$newCommentForm) this.$newCommentForm.remove();\n    }\n\n    // Delete a comment. If it is the only comment, delete the annotation\n    // Update state and re-render UI\n    destroyComment (event) {\n        let annotationId = this.annotation.id;\n        if(this.comments.length == 1) {\n            this.annotation.teardown();\n        } else {\n            let commentId  = this.findCommentId(event),\n                comment = this.comments.find((c) => c.id == commentId),\n                i = this.comments.indexOf(comment);\n            this.comments.splice(i, 1);\n            this.reRender();\n        }\n\n        this.plugin.annotationState.stateChanged();\n    }\n\n    findCommentId (event) {\n        let id = typeof event.detail.id === 'undefined' ?\n            $(event.target).closest('.vac-comment').data('id') :\n            event.detail.id;\n        return id;\n    }\n\n    // Prevents outer page scroll when at the top or bottom of CommentList UI\n    // TODO: This might need to be fine-tuned?\n    disablePageScroll (event) {\n        let $target = $(event.currentTarget),\n            height  = $target.height(),\n            ogEvent = event.originalEvent,\n            delta   = ogEvent.wheelDelta || -ogEvent.detail,\n            dir     = delta < 0 ? \"down\" : \"up\",\n            scrollDiff = Math.abs(event.currentTarget.scrollHeight - event.currentTarget.clientHeight);\n\n        // if scrolling into top of div\n        if ($target.scrollTop() < 20 && dir == \"up\") {\n            $target.stop();\n            $target.animate({scrollTop: 0}, 100);\n            event.preventDefault();\n        }\n\n        // if scrolling into bottom of div\n        if ($target.scrollTop() > (scrollDiff - 10) && dir == \"down\") {\n            $target.stop();\n            $target.animate({scrollTop: height + 40}, 100);\n            event.preventDefault();\n        }\n    }\n\n    // Sort comments by timestamp\n    sortComments () {\n        this.comments.sort((a,b) => {\n            return a.timestamp < b.timestamp ? -1 : (a.timestamp > b.timestamp ? 1 : 0);\n        });\n    }\n\n    // Delete the annotation\n    handleDeleteAnnotationClick (e) {\n        let $confirmEl = $(\"<a/>\").addClass(\"vac-delete-confirm\").text(\"CONFIRM\");\n        $confirmEl.on(\"click.comment\", () => {\n            $confirmEl.off(\"click.comment\");\n            this.annotation.teardown();\n        });\n        $(e.target).replaceWith($confirmEl);\n    }\n\n    // Unbind listeners for new comments form\n    unbindCommentFormEvents () {\n        if(this.$newCommentForm) this.$newCommentForm.off(\"click.vac-comment\");\n    }\n\n    // Teardown CommentList UI, unbind events\n    teardown (destroyComments=true) {\n        if(this.$el) {\n            this.$el.off(\"click.vac-comment mousewheel.vac-comment DOMMouseScroll.vac-comment\");\n        }\n        this.comments.forEach((c) => c.teardown());\n        if(destroyComments) this.comments = [];\n        super.teardown();\n    }\n}\n\nmodule.exports = {\n    class: CommentList\n};\n","\"use strict\";\n/*\n    Component for managing annotation \"control box\" in upper left of video when in annotation mode,\n    including all functionality to add new annotations\n*/\n\nconst   PlayerUIComponent = require(\"./../lib/player_ui_component\").class,\n        Utils = require(\"./../lib/utils\"),\n        DraggableMarker = require(\"./draggable_marker.js\").class,\n        SelectableShape = require(\"./selectable_shape.js\").class,\n        PlayerButton = require(\"./player_button\").class,\n        Annotation = require(\"./annotation\").class,\n        templateName = 'controls';\n\n// Control uses a \"ui state\" to determine how UI is rendered - this object is the base state, containing a\n// default value for each item in the state\nconst BASE_UI_STATE = Object.freeze({\n    adding: false,          // Are we currently adding a new annotation? (step 1 of flow)\n    writingComment: false   // Are we currently writing the comment for annotation (step 2 of flow)\n});\n\nclass Controls extends PlayerUIComponent {\n\n    constructor (playerId, bindArrowKeys) {\n        super(playerId);\n        this.initAPI(this, 'Controls');\n\n        this.internalCommenting = this.plugin.options.internalCommenting;\n        this.showControls = this.plugin.options.showControls;\n        this.uiState = Utils.cloneObject(BASE_UI_STATE);\n        this.bindEvents(bindArrowKeys);\n\n        if(this.showControls){\n            // create player button in the control bar if controls are shown\n            this.playerButton = new PlayerButton(this.playerId);\n        }\n\n        this.render();\n    }\n\n    // Bind all the events we need for UI interaction\n    bindEvents (bindArrowKeys) {\n        this.$player.on(\"click.vac-controls\", \".vac-controls button\", this.startAddNew.bind(this)) // Add new button click\n            .on(\"click.vac-controls\", \".vac-annotation-nav .vac-a-next\", () => this.plugin.annotationState.nextAnnotation() ) // Click 'next' on annotation nav\n            .on(\"click.vac-controls\", \".vac-annotation-nav .vac-a-prev\", () => this.plugin.annotationState.prevAnnotation() ) // Click 'prev' on annotation nav\n            .on(\"click.vac-controls\", \".vac-video-move .vac-a-next\", () => this.marker.scrubStart(1) ) // Click '+1 sec' on marker nav\n            .on(\"click.vac-controls\", \".vac-video-move .vac-a-prev\", () => this.marker.scrubStart(-1) ); // Click '-1 sec' on marker nav\n\n        if(this.internalCommenting) {\n            this.$player.on(\"click.vac-controls\", \".vac-add-controls button\", this.writeComment.bind(this)) // 'Next' button click while adding\n                .on(\"click.vac-controls\", \".vac-video-write-new.vac-is-annotation button\", this.saveNew.bind(this)) // 'Save' button click while adding\n                .on(\"click.vac-controls\", \".vac-add-controls a, .vac-video-write-new.vac-is-annotation a\", this.cancelAddNew.bind(this)) // Cancel link click\n        }\n        if(bindArrowKeys){\n            $(document).on(`keyup.vac-nav-${this.playerId}`, (e) => this.handleArrowKeys(e)); // Use arrow keys to navigate annotations\n        }\n    }\n\n    // Remove UI and unbind events for this and child components\n    teardown () {\n        this.clear(true);\n        this.$player.off('click.vac-controls');\n        $(document).off(`keyup.vac-nav-${this.playerId} mousemove.vac-tooltip-${this.playerId}`);\n        if(this.playerButton) this.playerButton.teardown();\n    }\n\n    // Clear existing UI (resetting components if need be)\n    clear (reset=false) {\n        if(reset){\n            if(this.uiState.adding){\n                this.restoreNormalUI();\n                this.marker.teardown();\n                this.selectableShape.teardown();\n            }\n            this.uiState = Utils.cloneObject(BASE_UI_STATE);\n            this.$player.find('.vac-video-cover-canvas')\n                .off('mousedown.vac-cursor-tooltip')\n                .off('mouseup.vac-cursor-tooltip');\n        }\n        this.$tooltip_ = null;\n        this.$UI.controlElements.remove();\n    }\n\n    // Render the UI elements (based on uiState)\n    render (reset=false) {\n        this.clear(reset);\n        let data = Object.assign(\n            {\n                rangeStr: this.marker ? Utils.humanTime(this.marker.range) : null,\n                showNav: this.plugin.annotationState.annotations.length > 1\n            },\n            this.uiState,\n            { internalCommenting: this.internalCommenting, showControls: this.showControls }\n        );\n\n        let $ctrls = this.renderTemplate(templateName, data);\n        this.$player.append($ctrls);\n\n        if(this.playerButton) this.playerButton.updateNumAnnotations();\n    }\n\n    // User clicked to cancel in-progress add - restore to normal state\n    cancelAddNew () {\n        if(!(this.uiState.adding || this.uiState.writingComment)) return;\n        this.render(true);\n        this.marker.teardown();\n        this.marker = null;\n    }\n\n    // User clicked 'add' button in the controls - setup UI and marker\n    startAddNew () {\n        if(!this.plugin.active) this.plugin.toggleAnnotationMode();\n\n        this.player.pause();\n        this.setAddingUI();\n        this.uiState.adding = true;\n        this.render();\n\n        // construct new range and create marker\n        let range = {\n            start: parseInt(this.currentTime,10),\n            stop: parseInt(this.currentTime,10)\n        };\n        this.marker = new DraggableMarker(this.playerId, range);\n        this.selectableShape = new SelectableShape(this.playerId);\n\n        // show cursor help text if controls are hidden\n        if(!this.showControls) this.bindCursorTooltip();\n\n        this.plugin.fire('enteredAddingAnnotation', { range: range });\n    }\n\n    // User clicked 'next' action - show UI to write comment\n    writeComment () {\n        this.uiState.writingComment = true;\n        this.render();\n    }\n\n    // User clicked to save a new annotation/comment during add new flow\n    saveNew () {\n        let comment = this.$UI.newCommentTextarea.val();\n        if(!comment) return; // empty comment - TODO add validation / err message\n\n        let a = Annotation.newFromData(this.marker.range, this.selectableShape.shape, comment, this.plugin);\n        this.plugin.annotationState.addNewAnnotation(a);\n\n        this.cancelAddNew();\n    }\n\n    // Change normal UI (hide markers, hide playback, etc) on init add state\n    setAddingUI () {\n        this.plugin.annotationState.enabled = false;\n        this.disablePlayingAndControl();\n    }\n\n    // Restore normal UI after add state\n    restoreNormalUI () {\n        this.plugin.annotationState.enabled = this.plugin.active;\n        this.enablePlayingAndControl();\n        $(document).off(`mousemove.vac-tooltip-${this.playerId}`);\n    }\n\n    // On arrow key press, navigate to next or prev Annotation\n    handleArrowKeys (e) {\n        if(!this.plugin.active) return;\n        let keyId = e.which;\n\n        if(keyId == 37) this.plugin.annotationState.prevAnnotation();\n        if(keyId == 39) this.plugin.annotationState.nextAnnotation();\n    }\n\n    // Adds help text to cursor during annotation mode\n    bindCursorTooltip () {\n        this.tooltipArea = Utils.areaOfHiddenEl(this.$tooltip, this.$UI.coverCanvas, this.UI_CLASSES.hidden);\n\n        // Assert bounds are updated in plugin in case page was modified since creation, so tooltip math is correct\n        this.plugin.setBounds(false);\n        $(document).on(`mousemove.vac-tooltip-${this.playerId}`, Utils.throttle(((event) => {\n            if(!this.plugin.bounds) return;\n\n            let x = event.pageX,\n                y = event.pageY,\n                outOfBounds =\n                    (x < this.plugin.bounds.left || x > this.plugin.bounds.right) ||\n                    (y < this.plugin.bounds.top || y > this.plugin.bounds.bottom),\n                withinControls = !outOfBounds && y >= this.plugin.bounds.bottomWithoutControls,\n                markerHovered = this.$tooltip.hasClass('vac-marker-hover');\n\n            if(outOfBounds) {\n                this.$tooltip.addClass(this.UI_CLASSES.hidden);\n                return\n            }\n\n            let cursorX      = x - this.plugin.bounds.left,\n                cursorY      = y - this.plugin.bounds.top,\n                margin       = 10,\n                rightEdge    = this.$player.width(),\n                bottomEdge   = this.$player.height() - this.$UI.controlBar.height(),\n                atRightEdge  = (cursorX + this.tooltipArea.width + margin*2) >= rightEdge,\n                atBottomEdge = (cursorY + this.tooltipArea.height + margin*2) >= bottomEdge;\n\n            // is the tooltip too close to the right or bottom edge?\n            let posX = atRightEdge ? (rightEdge - this.tooltipArea.width - margin) : (cursorX + margin),\n                posY = atBottomEdge ? (bottomEdge - this.tooltipArea.height - margin) : (cursorY + margin);\n\n            // hide if the cursor is over the control bar but not hovering over the draggable marker\n            // also hide if mouse is down\n            if((withinControls && !markerHovered) || this.$tooltip.hasClass('vac-cursor-dragging')) {\n                this.$tooltip.addClass(this.UI_CLASSES.hidden);\n            } else {\n                this.$tooltip.removeClass(this.UI_CLASSES.hidden);\n            }\n\n            this.$tooltip.css({\n                left: `${posX}px`,\n                top: `${posY}px`\n            });\n        }).bind(this), 50));\n    }\n\n    get $tooltip () {\n        this.$tooltip_ = this.$tooltip_ || this.$player.find('.vac-cursor-tool-tip');\n        return this.$tooltip_;\n    }\n}\n\nmodule.exports = {\n    class: Controls\n};\n","\"use strict\";\n/*\n    Component for a timeline marker that is draggable when user clicks/drags on it, and rebuilds underlying range\n    as drag occurs\n*/\n\nconst   Marker = require(\"./marker\").class,\n        Utils = require('./../lib/utils'),\n        markerTemplateName = 'draggable_marker';\n\nclass DraggableMarker extends Marker {\n\n    constructor (playerId, range) {\n        super(playerId, range);\n        this.range = range;                       // NOTE - this shouldn't be required and is a HACK for how transpilation works in IE10\n        this.templateName = markerTemplateName;   // Change template from base Marker template\n        this.dragging = false;                    // Is a drag action currently occring?\n        this.rangePin = range.start;              // What's the original pinned timeline point when marker was added\n        this.render();\n        this.$parent = this.$UI.markerWrap;       // Set parent as marker wrap\n    }\n\n    // Bind needed evnets for UI interaction\n    bindMarkerEvents () {\n        // On mouse down init drag\n        this.$el.on('mousedown.vac-marker', (e) => {\n            e.preventDefault();\n            this.dragging = true;\n            // When mouse moves (with mouse down) call onDrag, throttling to once each 250 ms\n            $(document).on(`mousemove.vac-dmarker-${this.playerId}`, Utils.throttle(this.onDrag.bind(this), 250) );\n\n            // Add drag class to cursor tooltip if available\n            if(!this.plugin.options.showControls) {\n                this.$player.find('.vac-cursor-tool-tip')\n                    .addClass('vac-cursor-dragging')\n                    .removeClass('vac-marker-hover');\n            }\n        });\n\n        // On mouse up end drag action and unbind mousemove event\n        $(document).on(`mouseup.vac-dmarker-${this.playerId}`, (e) => {\n             if(!this.dragging) return;\n             $(document).off(`mousemove.vac-dmarker-${this.playerId}`);\n             this.dragging = false;\n\n             // Remove drag class and hover class from cursor tooltip if available\n             if(!this.plugin.options.showControls) {\n                 this.$player.find('.vac-cursor-tool-tip')\n                    .removeClass('vac-cursor-dragging')\n                    .removeClass('vac-marker-hover');\n             }\n        });\n\n        // On mouse mouse enter, show cursor tooltip if controls are not shown\n        // This adds the class which is picked up in Controls\n        if(!this.plugin.options.showControls) {\n            var self = this;\n            self.$el\n                .on('mouseenter.vac-cursor-tool-tip', () => {\n                    self.$player.find('.vac-cursor-tool-tip').addClass('vac-marker-hover');\n                })\n                .on('mouseleave.vac-cursor-tool-tip', () => {\n                    self.$player.find('.vac-cursor-tool-tip').removeClass('vac-marker-hover');\n                });\n        };\n    }\n\n    // On drag action, calculate new range and re-render marker\n    onDrag (e) {\n        var dragPercent = this.percentValFromXpos(e.pageX),\n            secVal = parseInt(this.duration * dragPercent);\n\n        if(secVal > this.rangePin){\n            this.range = {\n                start:  this.rangePin,\n                end:    secVal\n            };\n        }else{\n            this.range = {\n                start:  secVal,\n                end:    this.rangePin\n            };\n        }\n        this.render();\n        this.plugin.fire('addingAnnotationDataChanged', { range: this.range });\n    }\n\n    // Cal percentage (of video) position for a pixel-based X position on the document\n    percentValFromXpos (xpos) {\n        var x = Math.max(0, xpos - this.$parent.offset().left), // px val\n            max = this.$parent.innerWidth(),\n            per = (x / max);\n        if(per > 1) per = 1;\n        if(per < 0) per = 0;\n        return per;\n    }\n\n    // Remove bound events on destructon\n    teardown () {\n        super.teardown();\n        $(document).off(`mousemove.vac-dmarker-${this.playerId} mouseup.vac-dmarker-${this.playerId}`);\n        this.$el.off('mouseenter.vac-cursor-tool-tip');\n        this.$el.off('mouseleave.vac-cursor-tool-tip');\n        this.$el.off('mousedown.vac-marker');\n    }\n\n    // Move the video & marker start by some num seconds (pos or neg)\n    scrubStart (secondsChanged) {\n        let newStart = this.range.start + secondsChanged;\n        this.currentTime = newStart;\n        this.range.start = newStart;\n        this.rangePin = newStart;\n        this.teardown();\n        this.render();\n\n        this.plugin.fire('addingAnnotationDataChanged', { range: this.range });\n    }\n}\n\nmodule.exports = {\n    class: DraggableMarker\n};\n","\"use strict\";\n/*\n    Component for a timeline marker with capabilities to render on timeline, including tooltip for comment\n*/\n\nconst   PlayerUIComponent = require(\"./../lib/player_ui_component\").class,\n        Utils = require(\"./../lib/utils\"),\n        markerTemplateName = 'marker',\n        markerWrapTemplateName = 'marker_wrap';\n\nclass Marker extends PlayerUIComponent {\n\n    constructor (playerId, range, comment=null) {\n        super(playerId);\n        this.range = range;\n        this.comment = comment;\n        this.templateName = markerTemplateName;\n\n        if(!this.$UI.markerWrap.length){\n            this.$UI.timeline.append(\n                this.renderTemplate(markerWrapTemplateName)\n            );\n        }\n    }\n\n    // Set this marker as active (highlight) and optionally show tooltip also\n    setActive (showTooltip=false) {\n        this.$el.addClass(this.UI_CLASSES.active);\n        if(showTooltip) this.$el.addClass('vac-force-tooltip');\n    }\n\n    // Deactivate this marker\n    deactivate () {\n        this.$el.removeClass(`${this.UI_CLASSES.active} vac-force-tooltip`);\n    }\n\n    // Draw marker on timeline for this.range;\n    render () {\n        // clear existing marker if this one was already rendered\n        this.$UI.timeline.find(`[data-marker-id=\"${this.componentId}\"]`).remove();\n\n        // Bind to local instance var, add to DOM, and setup events\n        this.$el = $(this.renderTemplate(this.templateName, this.markerTemplateData));\n        this.$UI.markerWrap.append(this.$el);\n        this.bindMarkerEvents();\n    }\n\n    // Bind needed events for this marker\n    bindMarkerEvents () {\n        // handle dimming other markers + highlighting this one on mouseenter/leave\n        this.$el.on(\"mouseenter.vac-marker\", () => {\n            this.$el.addClass('vac-hovering').closest(\".vac-marker-wrap\").addClass('vac-dim-all');\n        }).on(\"mouseleave.vac-marker\", () => {\n            this.$el.removeClass('vac-hovering').closest(\".vac-marker-wrap\").removeClass('vac-dim-all');\n        });\n    }\n\n    // Build object for template\n    get markerTemplateData () {\n         // the smaller the width, the higher the z-index so overlaps are clickable\n        let left = (this.range.start / this.duration) * 100,\n            width = ((this.range.end / this.duration) * 100) - left,\n            zIndex = (100 - Math.floor(width)) || 100;\n        return {\n            left:         left + '%',\n            width:        width + '%',\n            zIndex:       zIndex,\n            showTooltip:  this.plugin.options.showMarkerShapeAndTooltips,\n            tooltipRight: left > 50,\n            tooltipTime:  Utils.humanTime(this.range),\n            tooltipBody:  !this.comment ? null : this.comment.body,\n            rangeShow:    !!this.range.end,\n            id:           this.componentId\n        };\n    }\n\n    // Unbind event listeners on teardown and remove DOM nodes\n    teardown () {\n        this.$el\n            .off('mouseenter.vac-marker')\n            .off('mouseleave.vac-marker')\n            .off('click.vac-marker');\n        super.teardown();\n    }\n}\n\nmodule.exports = {\n    class: Marker\n};\n","\"use strict\";\n/*\n    Component main 'annotation toggle' button in the player controls, including notifier for # annotations\n*/\n\nconst PlayerUIComponent = require(\"./../lib/player_ui_component\").class,\n      templateName = \"player_button\";\n\nclass PlayerButton extends PlayerUIComponent {\n\n    constructor (playerId) {\n        super(playerId);\n        this.render();\n\n        this.initAPI(this, 'PlayerButton');\n\n        this.$el.on('click.vac-player-button', () => {\n            this.plugin.toggleAnnotationMode();\n        });\n    }\n\n    // Add button to player\n    render () {\n        let btn = this.player.getChild('controlBar').addChild('button', {});\n        btn.controlText(\"Toggle Animations\");\n        this.$el = $(btn.el());\n        this.$el.addClass('vac-player-btn').find(\".vjs-icon-placeholder\").html(this.renderTemplate(templateName));\n    }\n\n    // Update the number of annotations displayed in the bubble\n    updateNumAnnotations () {\n        let num = this.plugin.annotationState.annotations.length,\n            $bubble = this.$el.find(\"b\");\n        $bubble.text(num);\n        num > 0 ? $bubble.removeClass(this.UI_CLASSES.hidden) : $bubble.addClass(this.UI_CLASSES.hidden);\n    }\n\n    // Unbind event listeners on teardown and remove DOM nodes\n    teardown () {\n        this.$el.off('click.vac-player-button');\n        super.teardown();\n    }\n}\n\nmodule.exports = {\n    class: PlayerButton\n};\n","\"use strict\";\n/*\n    Component for a shape that can be drug/sized on top of the video while adding a new annotation\n*/\n\nconst   Shape = require(\"./shape\").class,\n        Utils = require('./../lib/utils');\n\nclass SelectableShape extends Shape {\n\n    constructor (playerId) {\n        super(playerId);\n        this.$parent = this.$player.find(\".vac-video-cover-canvas\");\n        this.bindEvents();\n        this.dragging = false;\n    }\n\n    // Bind all needed events for drag action\n    bindEvents () {\n        // On mousedown initialize drag\n        this.$parent.on(\"mousedown.vac-selectable-shape\", (e) => {\n            // Check a few conditions to see if we should *not* start drag\n            if( !($(e.target).hasClass('vac-video-cover-canvas')) ) return; //didn't click on overlay\n            if( $(e.target).hasClass('vac-shape') ) return; //user clicked on annotation\n\n            // Remove old shape if one existed\n            if(this.$el) this.$el.remove();\n\n            // Define default starting shape (just x/y coords of where user clicked no width/height yet)\n            let shape = {\n                x1: this.xCoordToPercent(e.pageX),\n                y1: this.YCoordToPercent(e.pageY)\n            };\n            shape.x2 = shape.x1;\n            shape.y2 = shape.y2;\n            this.shape = shape;\n\n            // Save origin points for future use\n            this.originX = shape.x1;\n            this.originY = shape.y1;\n\n            // Draw shape and start drag state\n            this.render();\n            this.dragging = true;\n            this.dragMoved = false; // used to determine if user actually dragged or just clicked\n\n            // Bind event on doc mousemove to track drag, throttled to once each 100ms\n            $(document).on(`mousemove.vac-sshape-${this.playerId}`, Utils.throttle(this.onDrag.bind(this), 100) );\n\n            // Add drag class to cursor tooltip if available\n            if(!this.plugin.options.showControls) {\n                this.$player.find('.vac-cursor-tool-tip').addClass('vac-cursor-dragging');\n            }\n        });\n\n        // On mouseup, if during drag cancel drag event listeners\n        $(document).on(`mouseup.vac-sshape-${this.playerId}`, (e) => {\n            if(!this.dragging) return;\n\n            $(document).off(`mousemove.vac-sshape-${this.playerId}`);\n\n            if(!this.dragMoved){\n                //clear shape if it's just a click (and not a drag)\n                this.shape = null;\n                if(this.$el) this.$el.remove();\n            }\n\n            this.dragging = false;\n\n            // Remove drag class from cursor tooltip if available\n            if(!this.plugin.options.showControls) {\n                this.$player.find('.vac-cursor-tool-tip').removeClass('vac-cursor-dragging');\n            }\n        });\n    }\n\n    // On each interation of drag action (mouse movement), recalc position and redraw shape\n    onDrag (e) {\n        this.dragMoved = true;\n\n        let xPer = this.xCoordToPercent(e.pageX),\n            yPer = this.YCoordToPercent(e.pageY);\n\n        if(xPer < this.originX){\n            this.shape.x2 = this.originX;\n            this.shape.x1 = Math.max(0, xPer);\n        }else{\n            this.shape.x2 = Math.min(100, xPer);\n            this.shape.x1 = this.originX;\n        }\n        if(yPer < this.originY){\n            this.shape.y2 = this.originY;\n            this.shape.y1 = Math.max(0, yPer);\n        }else{\n            this.shape.y2 = Math.min(100, yPer);\n            this.shape.y1 = this.originY;\n        }\n        this.setDimsFromShape();\n\n        this.plugin.fire('addingAnnotationDataChanged', { shape: this.shape });\n    }\n\n    // Convert pixel-based x position (relative to document) to percentage in video\n    xCoordToPercent (x) {\n        x = x - this.$parent.offset().left; //pixel position\n        let max = this.$parent.innerWidth();\n        return Number(((x / max) * 100).toFixed(2)); //round to 2 decimal places\n    }\n\n    // Convert pixel-based y position (relative to document) to percentage in video\n    YCoordToPercent (y) {\n        y = y - this.$parent.offset().top; //pixel position\n        let max = this.$parent.innerHeight();\n        return Number(((y / max) * 100).toFixed(2)); //round to 2 decimal places\n    }\n\n    // Unbind events and remove element\n    teardown () {\n        this.$parent.off('mousedown.vac-selectable-shape');\n        $(document).off(`mouseup.vac-sshape-${this.playerId} mousemove.vac-sshape-${this.playerId}`);\n        super.teardown();\n    }\n}\n\nmodule.exports = {\n    class: SelectableShape\n};\n","\"use strict\";\n/*\n    Component for managing a shape (i.e. box drawn on the player) for an annotation\n*/\n\nconst PlayerUIComponent = require(\"./../lib/player_ui_component\").class;\n\nclass Shape extends PlayerUIComponent {\n\n    constructor (playerId, shape=null) {\n        super(playerId);\n        this.shape = shape;\n        this.$parent = this.$player;\n    }\n\n    // Draw the shape element on the $parent\n    render () {\n        if(!this.shape) return;\n        if(this.$el) this.$el.remove();\n\n        this.$el = $(\"<div/>\").addClass(\"vac-shape\");\n        this.setDimsFromShape();\n        this.$parent.append(this.$el);\n    }\n\n    // Set/update the dimensions of the shape based  on this.shape\n    setDimsFromShape () {\n        this.$el.css({\n            left:   this.shape.x1 + \"%\",\n            top:    this.shape.y1 + \"%\",\n            width:  (this.shape.x2-this.shape.x1) + \"%\",\n            height: (this.shape.y2-this.shape.y1) + \"%\"\n        });\n    }\n}\n\nmodule.exports = {\n    class: Shape\n};\n","\"use strict\";\n/*\n    Load plugin and register to global videojs\n*/\n\n(($, videojs) => {\n    const AnnotationComments = require('./annotation_comments.js').class;\n    videojs.registerPlugin('annotationComments', AnnotationComments);\n})(jQuery, window.videojs);\n","'use strict';\n/*\n    Classes for registering and handling custom events for external interaction support.\n    Will be bound to plugin object as a message gateway between external elements and the plugin.\n*/\n\nconst Logger = require(\"./logger\");\n\nclass EventDispatcher {\n\n    constructor (plugin) {\n        this.plugin = plugin;\n        this.pluginReady = false;\n        this.pendingEvts = [];\n        this.registeredListeners = [];\n        this.eventRegistry = EventRegistry;\n    }\n\n    // Use the EventRegistry to mass register events on each component initialization\n    registerListenersFor (obj, className) {\n        let matchingEvents = this.eventRegistry[className];\n        if (matchingEvents) {\n            Object.keys(matchingEvents).forEach((key) => {\n                // Don't register again if already in cached collection\n                if (!~this.registeredListeners.indexOf(key)) {\n                    let callback = matchingEvents[key].bind(obj);\n                    this.registerListener(key, ((evt) => {\n                        if(!this.pluginReady) return;\n                        this.logCallback(key, className, evt);\n                        callback(evt, obj);\n                    }).bind(this));\n                }\n            });\n        }\n    }\n\n    // Bind a listener to the plugin\n    registerListener (type, callback) {\n        this.plugin.on(type, callback);\n        this.registeredListeners.push(type);\n    }\n\n    // Unbind a listener from the plugin\n    unregisterListener (type) {\n        this.plugin.off(type);\n        let i = this.registeredListeners.indexOf(type);\n        this.registeredListeners.splice(i, 1);\n    }\n\n    // Trigger an event on the plugin\n    fire (type, data) {\n        if(!this.pluginReady) return;\n        Logger.log(\"evt-dispatch-FIRE\", type, data);\n        let evt = new CustomEvent(type, { 'detail': data });\n        this.plugin.trigger(evt);\n    }\n\n    teardown () {\n        this.registeredListeners.forEach((type) => { this.unregisterListener(type) });\n    }\n\n    logCallback (eventName, className, event) {\n        Logger.log(\"evt-dispatch-RECEIVE\", `${eventName} (${className})`, event);\n    }\n}\n\n/*\n    A centralized collection of event callbacks organized by component and name\n    Main reference for external event api\n    These events will be bound to the plugin on initialization of their respective components\n    NOTE - 'self' as second param in each function is a workaround for transpiler not properly\n    keeping this , so we pass in instance to use as this for each fn - can't rely on bind\n    because this is rewritten from symbol registry in transpiler and it's not present\n*/\n\nconst EventRegistry = {\n    AnnotationState: {\n        openAnnotation: (event, _this) => {\n            _this.openAnnotationById(event.detail.id);\n        },\n        closeActiveAnnotation: (event, _this) => {\n            _this.clearActive();\n        },\n        newAnnotation: (event, _this) => {\n            _this.createAndAddAnnotation(event.detail);\n        },\n        destroyAnnotation: (event, _this) => {\n            _this.destroyAnnotationById(event.detail.id);\n        },\n        newComment: (event, _this) => {\n            let annotation = _this.findAnnotation(event.detail.annotationId);\n            if(annotation) annotation.commentList.createComment(event.detail.body);\n        },\n        destroyComment: (event, _this) => {\n            let comment = _this.findComment(event.detail.id);\n            if(comment) comment.commentList.destroyComment(event);\n        }\n    },\n    Controls: {\n        addingAnnotation: (event, _this) => {\n            _this.startAddNew();\n        },\n        cancelAddingAnnotation: (event, _this) => {\n            _this.cancelAddNew();\n        }\n    },\n    PlayerButton: {\n        onStateChanged: (event, _this) => {\n            _this.updateNumAnnotations();\n        }\n    },\n    AnnotationComments: {\n        toggleAnnotationMode: (event, _this) => {\n            _this.toggleAnnotationMode();\n        }\n    }\n};\n\nmodule.exports = {\n    class: EventDispatcher,\n    registry: EventRegistry\n};\n","'use strict';\n/*\n\tGeneral logging library, checking to see if window.VAC_DEBUG is present and true to enable debugging\n*/\n\n// Prefix for appending to all logger messages\nconst LOG_PREFIX = \"::VAC::\";\n\n// Are we in debug mode?\nfunction debug(){\n\treturn !!window.VAC_DEBUG;\n}\n\n// Build arguments for console fn, adding prefix\nfunction buildArgs(args){\n\treturn [LOG_PREFIX].concat(args);\n}\n\n// Log message/data\nmodule.exports.log = (...args) => {\n    if(!debug()) return;\n    console.log.apply(null, buildArgs(args));\n}\n\n// Error message/data\nmodule.exports.error = (...args) => {\n    if(!debug()) return;\n    console.error.apply(null, buildArgs(args));\n}\n\n// Info message/data\nmodule.exports.info = (...args) => {\n    if(!debug()) return;\n    console.info.apply(null, buildArgs(args));\n}\n","\"use strict\";\n/*\n    Base class all player components interit from - it includes lots of helper functions (to get reference to\n    the player, the plugin, video state, etc)\n*/\n\nclass PlayerComponent {\n\n    constructor (playerId) {\n        this.playerId = playerId;\n    }\n\n    // attribute to get reference to the main plugin object (main.js instance)\n    get plugin () {\n        return this.player.annotationComments();\n    }\n\n    // attribute to get player javascript instance\n    get player () {\n        return videojs(this.playerId);\n    }\n\n    // attribute to get video duration (in seconds)\n    get duration () {\n        return this.player.duration();\n    }\n\n    // attribute to get player current time\n    get currentTime () {\n        return this.player.currentTime();\n    }\n\n    // set current time of player\n    set currentTime (time) {\n        this.player.currentTime(time);\n    }\n\n    // Register all events in the EventRegistry matching this className\n    initAPI (obj, className) {\n        this.plugin.eventDispatcher.registerListenersFor(obj, className);\n    }\n}\n\nmodule.exports = {\n    class: PlayerComponent\n};\n","\"use strict\";\n/*\n    Base class all player UI components interit from - it includes lots of helper functions (to get reference to\n    the player $el, various classes/helpers, template rendering, etc)\n*/\n\nconst PlayerComponent = require(\"./player_component\").class,\n      Handlebars = require('handlebars/runtime'),\n      Templates = require('./../compiled/templates'),\n      Utils = require('./../lib/utils');\n\nclass PlayerUIComponent extends PlayerComponent{\n\n    constructor (playerId) {\n        super(playerId);\n    }\n\n    // helpers to get various UI components of the player quickly, keeping commonly reused class names\n    // consolidated in case of need to change in the future (and for quick access)\n    get $UI () {\n        return Object.freeze({\n            commentsContainer:      this.$player.find(\".vac-comments-container\"),       // outer container for all comments\n            controlElements:        this.$player.find(\".vac-control\"),                  // Each of multiple control elements in the control bar\n            newCommentTextarea:     this.$player.find(\".vac-video-write-new textarea\"), // Textarea for writing a new comment\n            timeline:               this.$player.find('.vjs-progress-control'),         // Timeline element\n            markerCursorHelpText:   this.$player.find('.vac-cursor-help-text'),         // Help text that appears with 'click/drag..' on timeline\n            controlBar:             this.$player.find('.vjs-control-bar'),              // Conrol bar wrapper for vjs\n            markerWrap:             this.$player.find('.vac-marker-wrap'),              // wrapper element to place markers in on timeline\n            coverCanvas:            this.$player.find('.vac-video-cover-canvas')        // Player cover during adding annotation state\n        });\n    }\n\n    // utility classes used in various components\n    get UI_CLASSES () {\n        return Object.freeze({\n            hidden: \"vac-hidden\",\n            active: \"vac-active\"\n        });\n    }\n\n    // attribute to get player jquery element\n    get $player () {\n        return $(this.player.el());\n    }\n\n        // Generate a pseudo-guid ID for this component, to use as an ID in the DOM\n    get componentId () {\n        this.cid_ = this.cid_ || Utils.guid()\n        return this.cid_;\n    }\n\n    // Disable play/control actions on the current player\n    disablePlayingAndControl () {\n        this.$player.addClass('vac-disable-play');\n        //TODO - catch spacebar being hit\n        //TODO - prevent scrubbing and timeline click to seek\n    }\n\n    // Enable play/control actions on the controller\n    enablePlayingAndControl () {\n        this.$player.removeClass('vac-disable-play');\n    }\n\n    // Render a handlebars template with local data passed in via key/val in object\n    renderTemplate (templateName, options = {}) {\n        this.registerHandlebarsHelpers();\n        return Templates[templateName](options);\n    }\n\n    // Handle escaped breaklines in Handlebars\n    registerHandlebarsHelpers () {\n        if('breaklines' in Handlebars.helpers) return;\n\n        Handlebars.registerHelper('breaklines', (text) => {\n            text = Handlebars.Utils.escapeExpression(text);\n            text = text.replace(/(\\r\\n|\\n|\\r)/gm, '<br>');\n            return new Handlebars.SafeString(text);\n        });\n    }\n\n    // Provide basic teardown function to inherit\n    teardown () {\n        if(this.$el) this.$el.remove();\n    }\n}\n\nmodule.exports = {\n    class: PlayerUIComponent\n};\n","/*\n    Collection of polyfills neededf or IE10+ support\n*/\n\n// Array.prototype.find() for IE10+\nrequire('ie-array-find-polyfill');\n// Object.assign for IE10+\nrequire('es6-object-assign').polyfill();\n\n// Allow use of object.constructor.staticFunc() in IE\n// Not yet supported by babel\n// https://gist.github.com/edoardocavazza/47246856759f2273e48b\n(function () {\n    if (typeof Object.setPrototypeOf === 'undefined' && typeof Object.getOwnPropertyNames === 'function') {\n        var _exclude = ['length', 'name', 'arguments', 'caller', 'prototype'];\n\n        function bindFunction(ctx, fn) {\n            return function() {\n                return fn.apply(this, arguments);\n            }\n        }\n\n        function bindProperty(ctx, prop, parentDescriptor) {\n            if (!parentDescriptor) {\n                var defaultValue = ctx.__proto__[prop];\n                parentDescriptor = {\n                    get: function () {\n                        return ctx['__' + prop] || defaultValue\n                    },\n                    set: function (val) {\n                        ctx['__' + prop] = val;\n                    }\n                }\n            }\n            Object.defineProperty(ctx, prop, {\n                get: parentDescriptor.get ? parentDescriptor.get.bind(ctx) : undefined,\n                set: parentDescriptor.set ? parentDescriptor.set.bind(ctx) : undefined,\n                configurable: true\n            });\n\n        }\n\n        function iterateProps(subClass, superClass) {\n            var props = Object.getOwnPropertyNames(superClass),\n                proto;\n\n            subClass.__proto__ = superClass;\n            for (var i = 0, len = props.length; i < len; i++) {\n                var prop = props[i];\n                if (prop === '__proto__') {\n                    proto = superClass[prop];\n                } else if (_exclude.indexOf(i) === -1) {\n                    var descriptor = Object.getOwnPropertyDescriptor(subClass, prop);\n                    if (!descriptor) {\n                        var superDescriptor = Object.getOwnPropertyDescriptor(superClass, prop);\n                        if (typeof superDescriptor.get !== 'function' && typeof superClass[prop] === 'function') {\n                            subClass[prop] = bindFunction(subClass, superClass[prop]);\n                        } else if (typeof superDescriptor.get == 'function') {\n                            bindProperty(subClass, prop, superDescriptor);\n                        } else {\n                            bindProperty(subClass, prop);\n                        }\n                    }\n                }\n            }\n            if (proto) {\n                iterateProps(subClass, proto);\n            }\n        }\n\n        Object.setPrototypeOf = iterateProps;\n    }\n})();\n\n// Use CustomEvent in IE\n(function () {\n  if ( typeof window.CustomEvent === \"function\" ) return false;\n\n  function CustomEvent ( event, params ) {\n    params = params || { bubbles: false, cancelable: false, detail: undefined };\n    var evt = document.createEvent( 'CustomEvent' );\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n    return evt;\n   }\n\n  CustomEvent.prototype = window.Event.prototype;\n\n  window.CustomEvent = CustomEvent;\n})();\n","\"use strict\";\n/*\n    Geneal utility functions, sourced from underscore & scratch built as needed\n*/\n\nmodule.exports = {\n\n    // Clone an object\n    cloneObject: (obj) => Object.assign({}, obj),\n\n    // _throttle from underscore\n    throttle: (func, wait, options) => {\n        var context, args, result;\n        var timeout = null;\n        var previous = 0;\n        if (!options) options = {};\n        var later = function() {\n          previous = options.leading === false ? 0 : Date.now();\n          timeout = null;\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        };\n        return function() {\n          var now = Date.now();\n          if (!previous && options.leading === false) previous = now;\n          var remaining = wait - (now - previous);\n          context = this;\n          args = arguments;\n          if (remaining <= 0 || remaining > wait) {\n            if (timeout) {\n              clearTimeout(timeout);\n              timeout = null;\n            }\n            previous = now;\n            result = func.apply(context, args);\n            if (!timeout) context = args = null;\n          } else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n          }\n          return result;\n        };\n    },\n\n    // Parse all keys of an object to int\n    parseIntObj: (obj) => {\n        Object.keys(obj).forEach((key) => {\n            if(parseInt(obj[key])) {\n                obj[key] = parseInt(obj[key]);\n            }\n        });\n        return obj;\n    },\n\n    // Convert a range {start: int, (optional) end: int} to human readable time\n    humanTime: (range) => {\n        function readable(sec){\n            let mins = Math.floor(sec/60),\n            secs = String(sec % 60);\n            return mins + \":\" + (secs.length==1 ? \"0\" : \"\") + secs;\n        }\n        let time = [readable(range.start)];\n        if(range.end) time.push(readable(range.end));\n        return time.join(\"-\");\n    },\n\n    // Pseduo-random guid generator\n    guid: () => {\n        function s4() {\n            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n        }\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +  s4() + '-' + s4() + s4() + s4();\n    },\n\n    // Returns the height and width of an element that is not visible\n    // clones el and tricks DOM into rendering it w the correct size\n    // beware the container may be important for scoped styles\n    areaOfHiddenEl: ($el, $container, hideClass='') => {\n        let $clone = $el.clone(),\n            data = {};\n        $clone.css({\n            visibility: 'hidden',\n            display: 'inline-block'\n        });\n        $clone.removeClass(hideClass);\n        $container.append($clone);\n        data.width = $clone.outerWidth();\n        data.height = $clone.outerHeight();\n        $clone.remove();\n\n        return data;\n    },\n\n    // Determine if a value (n) is within a range (start <= n <= end)\n    isWithinRange: (start, end, n) => {\n        end = end || start + 1; // for ranges with NO end defined, assume a 1s range\n        return n >= start && n <= end;\n    }\n};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}